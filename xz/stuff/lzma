#!/bin/sh
#
# Wrapper to accept lzma_alone or lzma_utils arguments
#

usage()
{
	status=$?
	cat 1>&2 <<EOT
Usage:  LZMA <e|d> inputFile outputFile [<switches>...]
  e: encode file
  d: decode file
<Switches>
  -a{N}:  set compression mode - [0, 2], default: 1 (max)
  -d{N}:  set dictionary - [12,30], default: 23 (8MB)
  -fb{N}: set number of fast bytes - [2, 273], default: 64
  -mc{N}: set number of cycles for match finder
  -lc{N}: set number of literal context bits - [0, 3], default: 3
  -lp{N}: set number of literal pos bits - [0, 4], default: 0
  -pb{N}: set number of pos bits - [0, 4], default: 2
  -mf{MF_ID}: set Match Finder: [bt2, bt3, bt4, hc3, hc4], default: bt4
  -eos:   write End Of Stream marker
  -si:    read data from stdin
  -so:    write data to stdout
EOT
	if [ "$1" = error ]; then
		echo -e "\nError"
		exit $status
	else
		exit 0
	fi
}

# Get lzma_alone arg
getarg()
{
	case "$1" in
	-a0)  mode="lzma1=mode=fast";;
	-a1)  mode="lzma1=mode=normal";;
	-a2)  mode="lzma2=mode=normal";;
	-d*)  extra="$extra,dict=$((2 ** ${1#-d}))";;
	-fb*) extra="$extra,fb=${1#-fb}";;
	-mc*) extra="$extra,depth=${1#-mc}";;
	-lc*) extra="$extra,lc=${1#-lc}";;
	-lp*) extra="$extra,lp=${1#-lp}";;
	-pb*) extra="$extra,pb=${1#-pb}";;
	-mf*) extra="$extra,mf=${1#-mf}";;
	-eos|-mt*) ;;
	-si)  output="> ${input#< }"; input="";;
	-so)  output="";;
	*) return 1;;
	esac
	return 0
}

lzma_utils()
{
	args="--format=lzma"
	files=""
	suffix=lzma
	while [ -n "$1" ]; do
		case "$1" in
		-e) args="$args -z";;
		-d|-k|-[0-9]) args="$args $1";;
		--fast) args="$args -1";;
		--best) args="$args -9";;
		-c|--stdout|--to-stdout) args="$args -c";;
		-S) suffix=${2#.}; shift;;
		-*);;
		*) files="$files $1";;
		esac
		shift
	done
	for i in $files; do
		xz $args $i || usage error
		[ "lzma" == "$suffix" ] || mv ${i%.*}.lzma ${i%.*}.$suffix
	done
	exit
}

fix_size()
{
	n=$1
	for i in $(seq 1 8); do
		printf '\\\\x%02X' $(($n & 255))
		n=$(($n >> 8))
	done | xargs echo -en | dd of=$2 conv=notrunc bs=1 seek=5 2> /dev/null
}

case "$0" in
*unlzma) lzma_utils -d $@ ;;
*lzcat)  lzma_utils -c -d $@ ;;
esac

# First look if help is needed.
case "$1" in
--version|-V|--help|-h|-\?|'') usage;;
--size) size=$(od -t d8 -j5 -N8 < $2 | awk '{ print $2; exit }') 
	if [ $size -eq -1 ]; then
		size=$(unlzma -c $2 | wc -c)
		fix_size $size $2
	fi
	echo $size
	exit ;;
esac

# lzma_utils or lzma_alone ?
[ -n "$3" ] || lzma_utils $@
case "$1" in
d) args="-d";;
e) args="-z";;
*) lzma_utils $@;;
esac

# it's lzma_alone
# get filenames
input="< $2"
output="> $2"
shift
if ! getarg "$1"; then
	output="> $2"
	getarg "$2"
	shift
fi

# get arguments
extra=""
mode="lzma1=mode=normal"
while [ -n "$2" ]; do
	getarg "$2" || usage error
	shift
done

# fake lzma_alone (-eos -mt1)
eval xz $args --format=lzma --$mode$extra --stdout $input $output || usage error
[ -n "$input" -a -n "$output" ] &&
	fix_size $(stat -c "%s" ${input#< }) ${output#> }
exit 0
