#!/bin/sh
#
# get-community-backgrounds - create and install SliTaz package community-backgrounds
#
# (C) 2020 SliTaz - GNU General Public License v3.
# Author : Leonardo Laporte
# modified by HGT on 2020-01-29
#

#	=== Initialisations ===

PKGS_DB="/var/lib/tazpkg"	# packages database directory

PACKAGE="community-backgrounds"
VERSION="001"
CATEGORY="x-window"
TAGS="artwork background wallpaper"
SHORT_DESC="Beautiful wallpapers created by the Slitaz Community."
MAINTAINER="hackdorte@sapo.pt"
LICENSE="BSD"
WEB_SITE="https://github.com/Slitaz-official/hackdorte-artwork"

# Declare functions check_root, status, ...
. /lib/libtaz.sh
# and make commandline options (if any) available as variables

[ -f '/etc/slitaz/slitaz.conf' ] && . /etc/slitaz/slitaz.conf

is_installed()
{
	if [ -d $ROOT$PKGS_DB/installed/$PACKAGE ]
	  then	#package is deemed to be installed
	 	return 0
	  else
	 	return 1
	 fi
}

# Show commandline options, if requested by --help
if [ "$help" == "yes" ]
  then
	echo "Commandline options:
  $0
	--root=<path-to-root>
	--install=yes|no
	--keep=no|yes
	--tmpdir=<directory-to-build-package>"
	exit
fi

# Check for system administrator privileges
check_root

title "Package $PACKAGE will be build as SliTaz package and installed"

# Install SliTaz package, unless inhibited by option --install=no
[ -z "$install" ] && install="yes"

# Delete SliTaz package file $PACKAGE-$VERSION.tazpkg after installation,
# unless option --keep=yes is given
[ -z "$keep" ] && keep="no"

# Directory for temporary files
[ -z "$tempdir" ] && TMP_DIR="/tmp/get-$PACKAGE"

# Logging file (unused by now)
LOG=$TMP_DIR/get-$PACKAGE.log

cat <<EOT
Options in use:
  root           : $root/
  install package: $install
  keep tazpkg    : $keep
  build directory: $TMP_DIR

EOT

separator
newline

#	=== Remove package, if installed ===
if [ is_installed ]
  then
	action "Removing installed version..."
	newline
	tazpkg remove $PACKAGE --root="$root/"
	[ ! is_installed ] &&
	die "Can't remove installed version. Exiting."
fi

#	=== Fetch archive file, if not existing ===
FILE="master.zip"
WGET_URL="${WEB_SITE}/archive/$FILE"

CUR_DIR=$(pwd)
mkdir -p $TMP_DIR
cd $TMP_DIR
if [ -f $FILE ]
  then
	echo "Using existing archive file $FILE"
  else
	action "Fetching the archive"
	newline
	wget	--no-check-certificate $WGET_URL
	if [ ! -f $FILE ]
	  then
		cd $CUR_DIR
		rm -rf $TMP_DIR
		echo "Could not transfer $FILE from $WGET_URL. Exiting."
		exit 1
	fi
fi

#	=== Extract files from archive ===
action "Extracting the archive"
newline
busybox unzip -o $FILE
status

# Remove archive file
rm -f $FILE

# Building Base
mkdir -p $PACKAGE-$VERSION/fs/usr/share/images
mv hackdorte-artwork-master/images/* \
	$PACKAGE-$VERSION/fs/usr/share/images

action "Cleaning..."
rm -rf	$PACKAGE-$VERSION/fs/usr/share/images/README.md
rm -rf	hackdorte-artwork-master
status

# Create recipe for SliTaz package
cat > $PACKAGE-$VERSION/receipt <<EOT
# SliTaz package receipt.

PACKED_SIZE=""
UNPACKED_SIZE=""
PACKAGE="$PACKAGE"
VERSION="$VERSION"
CATEGORY="$CATEGORY"
TAGS="$TAGS"
SHORT_DESC="$SHORT_DESC"
MAINTAINER="$MAINTAINER"
LICENSE="$LICENSE"
WEB_SITE="$WEB_SITE"

EOT

action "Creating the package $PACKAGE..."
tazpkg pack $PACKAGE-$VERSION
# Remove package tree
rm -rf $PACKAGE-$VERSION

#	=== Install the SliTaz package ===
[ "$install" == "yes" ] &&
tazpkg install $PACKAGE-$VERSION.tazpkg --root="$root"

#	=== Cleanup ===
# Preserve package file, if requested
[ "$keep" == "yes" ] &&
( mv $PACKAGE-$VERSION.tazpkg $CUR_DIR;
  echo $PACKAGE-$VERSION.tazpkg saved to $CUR_DIR )

# Remove temporary build directory
cd $CUR_DIR
rm -rf $TMP_DIR
