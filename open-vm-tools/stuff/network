#!/bin/sh
##########################################################
# Copyright (C) 2001-2010 VMware, Inc. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation version 2.1 and no later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the Lesser GNU General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA.
#
##########################################################

exit 0


#
# network (Linux)
#
# Using a combination of a system networking script, ifconfig, and ifup,
# attempt to release and renew DHCP leases upon receipt of suspend and resume
# events, respectively.
#


echo `date` ": Executing '$0'"
echo

. `dirname "$0"`/../../statechange.subr


#
# find_networking_script --
#
#    Searches common Linux distro init/rc paths to find a singular network
#    services script.
#
# Result:
#    Returns a valid networking script path on success or "error" on failure.
#
# Side effects:
#    None.
#

find_networking_script() {
   echo "network.sh"
}


#
# run_network_script --
#
# Finds out how to run the system's script used to control networking, and
# runs it with the given argument (which should be one of the usual SysV
# init script arguments).
#
run_network_script()
{
   script=`find_networking_script`
   [ "$script" != "error" ] || Panic "Cannot find system networking script."

   "$script" "$1"
}


#
# save_active_NIC_list --
#
#    Records a list of every active NIC to /var/run/vmware-active-nics.
#
#    XXX What's the story on aliases?  Should they still be included, or will
#    they be recreated automatically upon resume?
#
# Results:
#    $activeList has, one per line, a list of all active NICs.
#
# Side effects:
#    None.
#

save_active_NIC_list() {
   >$activeList

   for nic in `ifconfig | awk '/^eth/ { print $1 }'`; do
      ifconfig $nic | egrep -q '\bUP\b' && echo $nic >> $activeList
      exitCode=`expr $exitCode \| $?`
   done
}


#
# rescue_NIC --
#
#    For each NIC recorded in $activeList that is not currently "up", run
#    "INTERFACE=$nic network.sh start".
#
# Results:
#    All downed NICs should be active.
#

rescue_NIC() {
   if [ -f "$activeList" ]; then
      while read nic; do
         if ifconfig $nic | egrep -q '\bUP\b'; then
            echo `date` "[rescue_nic] $nic is already active."
         else
            echo `date` "[rescue_nic] activating $nic ..."

            INTERFACE=$nic /etc/init.d/network.sh start
            exitCode=`expr $exitCode \| $?`
         fi
      done < $activeList

      rm -f $activeList
   fi
}


#
# main --
#
#    Main entry point.  Perform some sanity checking, then map state change
#    events to relevant networking operations.
#
# Results:
#    See comment at top of file.
#

main() {
   exitCode=0
   activeList=/var/run/vmware-active-nics

   # XXX Are these really necessary?  If so, we should have seen customer
   # complaints by now.
   which ifconfig >/dev/null 2>&1  || Panic "ifconfig not in search path."

   case "$1" in
      poweron-vm)
         rm -f $activeList
         ;;
      suspend-vm)
         exitCode=$?
         if [ $exitCode != 0 ]; then
            save_active_NIC_list
            run_network_script stop
            exitCode=$?
         fi
         ;;
      resume-vm)
         WakeNetworkManager
         exitCode=$?
         if [ $exitCode != 0 ]; then
            # According to hfu, "/etc/init.d/networking restart" on Debian 5.0
            # may bring down ethernet interfaces tagged as "allow-hotplug" without
            # bringing them back up.
            #
            # This is especially a problem when reverting to a live, running
            # VM snapshot where an active NIC list hadn't yet been generated,
            # resulting in sudden loss of an otherwise operational NIC.
            #
            # So, if the active list doesn't exist, assume we're coming back to
            # a live snapshot and capture the current active list now for
            # rescue later.
            if [ ! -s $activeList ]; then
               save_active_NIC_list
            fi

            # We shall use start not restart here. Otherwise we may not be able
            # to bring back active list on distros like sles11sp2
            # -- PR 816791
            run_network_script start
            rescue_NIC
            exitCode=$?
         fi
         ;;
      *) ;;
   esac

   return $exitCode
}

main "$@"
