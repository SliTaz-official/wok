#!/bin/sh 
# Google Chrome is built with open source code from Chromium.

PACKAGE="google-chrome-unstable"
DEBPKG="${PACKAGE}_current_i386.deb"
URL="http://dl.google.com/linux/direct/$DEBPKG"
CUR_DIR=$(pwd)
TEMP_DIR=/tmp/$PACKAGE-$$
ROOT="$1"

# Check if we are root
if test $(id -u) != 0 ; then
    echo -e "\nYou must be root to run `basename $0`."
    echo -e "Please type 'su' and root password to become super-user.\n"
    exit 1
fi

# Avoid reinstall
if [ -d $ROOT/var/lib/tazpkg/installed/$PACKAGE ]; then
    echo -e "\n$PACKAGE package is already installed.\n"
    exit 1
fi

# Create a TEMP_DIR
mkdir $TEMP_DIR
cd $TEMP_DIR

# Download the file
wget $URL 
if [ ! -f $DEBPKG ]; then
	cd $CUR_DIR
	rm -rf $TEMP_DIR
	echo "Could not download $DEBPKG. Exiting."
	exit 1
fi

# Install binutils(ar) pkg
if [ ! -d /var/lib/tazpkg/installed/binutils ]; then
    tazpkg get-install binutils
fi
if [ ! -f /usr/bin/ar ]; then
    cd $CUR_DIR
    rm -rf $TEMP_DIR
    echo "Could not extract $DEBPKG. Exiting."
    exit 1
fi

ar x $DEBPKG control.tar.gz data.tar.lzma && lzma d data.tar.lzma -so | tar xf -
tar xzf control.tar.gz ./control
VERSION=`sed -n 's/Version:\ *//p' control`

# extracted pkg can be removed: Save RAM
rm -rf $DEBPKG

mkdir -p $PACKAGE-$VERSION/fs
mv usr opt $PACKAGE-$VERSION/fs

cd $TEMP_DIR

cat > $PACKAGE-$VERSION/receipt << EOT
PACKAGE="$PACKAGE"
VERSION="$VERSION"
CATEGORY="non-free"
SHORT_DESC="The web browser from Google."
DEPENDS="gtk+ GConf lzma flash-plugin bash xdg-utils"
WEB_SITE="http://www.google.com/chrome/"

post_install()
{
    local root
    root=$1
    ln -s /usr/lib/libnspr4.so $root/usr/lib/libnspr4.so.0d 2> /dev/null
    ln -s /usr/lib/libnss3.so $root/usr/lib/libnss3.so.1d 2> /dev/null
    ln -s /usr/lib/libnssutil3.so $root/usr/lib/libnssutil3.so.1d 2> /dev/null
    ln -s /usr/lib/libplc4.so $root/usr/lib/libplc4.so.0d 2> /dev/null
    ln -s /usr/lib/libplds4.so $root/usr/lib/libplds4.so.0d 2> /dev/null
    ln -s /usr/lib/libsmime3.so $root/usr/lib/libsmime3.so.1d 2> /dev/null
    ln -s /usr/lib/libssl3.so $root/usr/lib/libssl3.so.1d 2> /dev/nul
    sed -i 's/exec -a "$0"/exec /' $root/usr/bin/google-chrome 2> /dev/null

    # Add icons to the system icons
    XDG_ICON_RESOURCE="\`which xdg-icon-resource 2> /dev/null\`"
    if [ ! -x "\$XDG_ICON_RESOURCE" ]; then
        echo "Error: Could not find xdg-icon-resource" >&2
        return 1
    fi
    for icon in "/opt/google/chrome/product_logo_"*.png; do
        size="\${icon##*/product_logo_}"
        "\$XDG_ICON_RESOURCE" install --size "\${size%.png}" "\$icon" "google-chrome"
    done

    # Add an entry to the system menu
    XDG_DESKTOP_MENU="\`which xdg-desktop-menu 2> /dev/null\`"
    UPDATE_MENUS="\`which update-menus 2> /dev/null\`"
    if [ ! -x "\$XDG_DESKTOP_MENU" ]; then
        echo "Error: Could not find xdg-desktop-menu" >&2
        return 1
    fi
    "\$XDG_DESKTOP_MENU" install /opt/google/chrome/google-chrome.desktop

    if [ -x "\$UPDATE_MENUS" ]; then
        update-menus
    fi
}
pre_remove()
{
    rm -f /usr/lib/libnspr4.so.0d \
        /usr/lib/libnss3.so.1d \
        /usr/lib/libnssutil3.so.1d \
        /usr/lib/libplc4.so.0d \
        /usr/lib/libplds4.so.0d \
        /usr/lib/libsmime3.so.1d \
        /usr/lib/libssl3.so.1d 2> /dev/nul

    # Remove icons from the system icons
    XDG_ICON_RESOURCE="\`which xdg-icon-resource 2> /dev/null\`"
    if [ ! -x "\$XDG_ICON_RESOURCE" ]; then
        echo "Error: Could not find xdg-icon-resource" >&2
        return 1
    fi
    for icon in "/opt/google/chrome/product_logo_"*.png; do
        size="\${icon##*/product_logo_}"
        "\$XDG_ICON_RESOURCE" uninstall --size "\${size%.png}" "google-chrome"
    done

    # Remove the entry from the system menu
    XDG_DESKTOP_MENU="\`which xdg-desktop-menu 2> /dev/null\`"
    UPDATE_MENUS="\`which update-menus 2> /dev/null\`"
    if [ ! -x "\$XDG_DESKTOP_MENU" ]; then
        echo "Error: Could not find xdg-desktop-menu" >&2
        return 1
    fi
    "\$XDG_DESKTOP_MENU" uninstall /opt/google/chrome/google-chrome.desktop

    if [ -x "\$UPDATE_MENUS" ]; then
        update-menus
    fi
}
EOT

# Pack
tazpkg pack $PACKAGE-$VERSION

# Clean to save RAM memory
rm -rf $PACKAGE-$VERSION

# Install pseudo package
yes y | tazpkg install $PACKAGE-$VERSION.tazpkg --root=$ROOT

# Clean
cd $CUR_DIR
rm -rf $TEMP_DIR
