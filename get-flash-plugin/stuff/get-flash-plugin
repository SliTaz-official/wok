#!/bin/sh
#
# get-flash-plugin - create and install SliTaz package flash-plugin
#
# (C) 2020 SliTaz - GNU General Public License v3.
# Author : Pascal Bellard
# modified by HGT on 2020-02-10
#

#	=== Initialisations ===

PKGS_DB="/var/lib/tazpkg"	# packages database directory
PACKAGE="flash-plugin"
SHORT_DESC="Adobe Flash Player."
CATEGORY="non-free"
LICENSE="non-free"
WEB_SITE="https://www.adobe.com/products/flashplayer/"

DEPENDS="atk cairo curl expat fontconfig freetype glib gtk+ libfirefox libpng \
	nss pango pixman xorg-libICE xorg-libSM xorg-libX11 xorg-libXau xorg-libXcomposite \
	xorg-libXcursor xorg-libXdamage xorg-libXdmcp xorg-libXext xorg-libXfixes \
	xorg-libXinerama xorg-libXrandr xorg-libXrender xorg-libXt zlib"

# Declare functions check_root, status, ...
. /lib/libtaz.sh
# and make commandline options (if any) available as variables

is_installed()
{
	if [ -d $ROOT$PKGS_DB/installed/$PACKAGE ]
	  then	#package is deemed to be installed
	 	return 0
	  else
	 	return 1
	 fi
}

# Show commandline options, if requested by --help
if [ "$help" == "yes" ]
  then
	echo "Commandline options:
  $0
	--version=<version>
	--root=<path-to-root>
	--install=yes|no
	--keep=no|yes
	--tmpdir=<directory-to-build-package>"
	exit
fi

# Check for system administrator privileges
check_root

title "Package $PACKAGE will be build as SliTaz package and installed"

# Fetch latest version, unless version is set by option --version
[ -z "$version" ] && version="latest"

# Install SliTaz package, unless inhibited by option --install=no
[ -z "$install" ] && install="yes"

# Delete SliTaz package file $PACKAGE-$VERSION.tazpkg after installation,
# unless option --keep=yes is given
[ -z "$keep" ] && keep="no"

# Directory for temporary files
TMP_DIR="$tmpdir"
[ -z "$tmpdir" ] && TMP_DIR="/tmp/get-$PACKAGE"

# Logging file (unused by now)
LOG=$TMP_DIR/get-$PACKAGE.log

cat <<EOT
Options in use:
  root           : $root/
  version        : $version
  install package: $install
  keep tazpkg    : $keep
  build directory: $TMP_DIR

EOT

separator; newline

#	=== Remove package, if installed ===
if is_installed
  then
	echo "$PACKAGE is already installed."
	echo -n "Would you like to remove and reinstall this package [y/n]? "
	read answer
	case "$answer" in
		y|Y)
			action "Removing installed version..."
			tazpkg remove $PACKAGE --root="$root/"
			[ ! is_installed ] &&
			die "Can't remove installed version. Exiting."
			;;
		*)
			echo "Leaving $PACKAGE untouched."
			exit 0
			;;
	esac
fi

#	=== Fetch archive file, if not existing ===
if [ "$version" == "latest" ]
  then
	VERSION="$(wget --no-check-certificate -q -O - \
		https://helpx.adobe.com/flash-player/kb/archived-flash-player-versions.html |\
		sed -n '/Released /p' | head -1 | sed 's|.*fp_\(.*\)_archive.*|\1|')"
  else
	VERSION=$version
fi
FILE="fp_${VERSION}_archive.zip"
WGET_URL="https://fpdownload.macromedia.com/pub/flashplayer/installers/archive/$FILE"

CUR_DIR=$(pwd)
mkdir -p $TMP_DIR
cd $TMP_DIR
if [ -f $FILE ]
  then
	echo "Using existing archive file $FILE"
  else
	action "Fetching the archive"
	newline
	wget	--no-check-certificate $WGET_URL
	if [ ! -f $FILE ]
	  then
		cd $CUR_DIR
		rm -rf $TMP_DIR
		echo "Could not transfer $FILE from $WGET_URL. Exiting."
		exit 1
	fi
fi

#	=== Extract files from archive ===
action "Extracting the archive"
newline

mkdir $PACKAGE
cd $PACKAGE
unzip $TMP_DIR/$FILE *linux.i386.tar.gz
tar xf */*linux.i386.tar.gz 
status

# Remove archive file
cd $TMP_DIR
rm -f $FILE

# Install files
fs=$PACKAGE-$VERSION/fs
mkdir -p $fs/usr/share/flash

mv $PACKAGE/libflashplayer.so		$fs/usr/share/flash
chmod 755 				$fs/usr/share/flash/libflashplayer.so
chown root.root				$fs/usr/share/flash/libflashplayer.so
mv $PACKAGE/usr/bin			$fs/usr
mv $PACKAGE/usr/share/icons		$fs/usr/share
mv $PACKAGE/usr/share/pixmaps		$fs/usr/share
mv $PACKAGE/usr/share/applications	$fs/usr/share

# Sanity Check: Reexport firefox libraries if they don't exist
dir=$PACKAGE-$VERSION/fs/usr/lib
mkdir -p $dir
for i in /usr/lib/firefox/*.so
  do
	[ -f $i ] &&
	[ -z "$(ls /usr/lib/$(basename $i))" ] &&
	ln -s $i $dir
  done

#	=== Create SliTaz package ===

cd $PACKAGE-$VERSION

# Create recipe for SliTaz package
cat > receipt <<EOT
# SliTaz package receipt.

PACKAGE="$PACKAGE"
VERSION="$VERSION"
CATEGORY="$CATEGORY"
SHORT_DESC="$SHORT_DESC"
LICENSE="$LICENSE"
WEB_SITE="$WEB_SITE"

DEPENDS="$DEPENDS"

post_install()
{
	[ -d \$1/usr/lib/mozilla/plugins ] || mkdir -p \$1/usr/lib/mozilla/plugins
	ln -s /usr/share/flash/libflashplayer.so \$1/usr/lib/mozilla/plugins
	[ -d \$1/opt/google/chrome/plugins ] || mkdir -p \$1/opt/google/chrome/plugins
	ln -s /usr/share/flash/libflashplayer.so \$1/opt/google/chrome/plugins/libgcflashplayer.so
	[ -d \$1/usr/lib/opera/plugins ] || mkdir -p \$1/usr/lib/opera/plugins
	ln -s /usr/share/flash/libflashplayer.so \$1/usr/lib/opera/plugins/libflashplayer.so
}

post_remove()
{
	rm -f \$1/usr/lib/mozilla/plugins/libflashplayer.so
	rm -f \$1/opt/google/chrome/plugins/libgcflashplayer.so
	rm -f \$1/usr/lib/opera/plugins/libflashplayer.so
}
EOT

cd $TMP_DIR

action "Creating the package $PACKAGE..."
# Pack
tazpkg pack $PACKAGE-$VERSION
# Remove package tree
rm -rf $PACKAGE-$VERSION

#	=== Install the SliTaz package ===
[ "$install" == "yes" ] &&
tazpkg install $PACKAGE-$VERSION.tazpkg --root="$root"

#	=== Cleanup ===
# Preserve package file, if requested
[ "$keep" == "yes" ] &&
( mv $PACKAGE-$VERSION.tazpkg $CUR_DIR &&
  echo Saved $PACKAGE-$VERSION.tazpkg to $CUR_DIR )

# Remove temporary build directory
cd $CUR_DIR
rm -rf $TMP_DIR
