# SliTaz package receipt.

PACKAGE="slitaz-loram"
VERSION="1.2"
CATEGORY="misc"
SHORT_DESC="Rules to build low ram rootfs.gz."
MAINTAINER="pascal.bellard@slitaz.org"
DEPENDS="cromfs"
WEB_SITE="http://www.slitaz.org/"

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
    mkdir -p $fs/etc/tazlito
    cp stuff/loram.* $fs/etc/tazlito
}

set_patch()
{
    local tag
    local line
    local i
    tag="Creat /dev/cdrom if needed"
    i=$(grep -n "$tag" $1/etc/init.d/rcS | cut -d: -f1)
    i=$(($i-1))
    tag=$(grep "$tag" $1/etc/init.d/rcS)
    if [ "$2" = "-R" ]; then
    	line="-$(($i-21)),23 +$(($i-21)),2"
	i="-"
    else
        grep -q 'from slitaz-loram package' $1/etc/init.d/rcS && return
    	line="-$i,2 +$i,23"
	i="+"
    fi
    patch -p0 <<EOF
--- $1/etc/init.d/rcS
+++ $1/etc/init.d/rcS
@@ $line @@
 
$i# Mount compressed /usr (from slitaz-loram package)
$i if [ -f /.usr.cromfs -o -f /.usr.sqfs ]; then
$i	usr=usr
$i	echo -n "Mounting /usr read-"
$i	if [ -d /.usr.rw ]; then
$i		usr=.usr.ro
$i		echo -n "write... "
$i	else
$i		echo -n "only... "
$i	fi
$i	if [ -f /.usr.cromfs ]; then
$i		/bin/cromfs-driver /.usr.cromfs /\$usr
$i	else
$i		/bin/mount -o loop,ro -t squashfs /.usr.sqfs /\$usr
$i	fi
$i	if [ -d /.usr.rw ]; then
$i		/bin/funionfs -o dirs=/.usr.ro=RO:/.usr.rw -o allow_other NONE /usr
$i	fi
$i	status
$i fi
$i
 $tag
EOF
    chmod 0755 $1/etc/init.d/rcS
}

# Pre and post install commands for Tazpkg.
pre_install()
{
    local i
    . /etc/tazlito/tazlito.conf
    for i in $(cd /var/lib/tazpkg/installed ; ls -d slitaz-loram* 2> /dev/null); do
        [ "$i" = "$PACKAGE" ] && continue
        yes y | tazpkg remove $i
	rm -f $PACKAGES_REPOSITORY/slitaz-boot-scripts-*.tazpkg 2> /dev/null
    done
}

post_install()
{
    set_patch "$1"
    if [ ! -x /bin/funionfs ]; then
        cat <<EOF
----
You will build a live CD with /usr mounted read-only.
You can install funionfs to have read-write access into /usr with:

# tazpkg get-install funionfs

EOF
    fi
}

# Pre remove commands for Tazpkg.
pre_remove()
{
    set_patch '' -R
}
