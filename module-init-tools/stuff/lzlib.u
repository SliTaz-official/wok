--- module-init-tools-3.2/zlibsupport.c
+++ module-init-tools-3.2/zlibsupport.c
@@ -16,58 +16,33 @@
 #include "testing.h"
 
 #ifdef CONFIG_USE_ZLIB
-#include <zlib.h>
+#include <lzlib.h>
 
-void *grab_contents(gzFile *gzfd, unsigned long *size)
-{
-	unsigned int max = 16384;
-	void *buffer = malloc(max);
-	int ret;
-
-	if (!buffer)
-		return NULL;
-
-	*size = 0;
-	while ((ret = gzread(gzfd, buffer + *size, max - *size)) > 0) {
-		*size += ret;
-		if (*size == max) {
-			buffer = realloc(buffer, max *= 2);
-			if (!buffer)
-				return NULL;
-		}
-	}
-	if (ret < 0) {
-		free(buffer);
-		buffer = NULL;
-	}
-	return buffer;
-}
-
 void *grab_fd(int fd, unsigned long *size)
 {
-	gzFile gzfd;
+	lzFile lzfd;
 
-	gzfd = gzdopen(fd, "rb");
-	if (!gzfd)
+	lzfd = lzdopen(fd, "rb");
+	if (!lzfd)
 		return NULL;
 
-	/* gzclose(gzfd) would close fd, which would drop locks.
+	/* lzclose(lzfd) would close fd, which would drop locks.
 	   Don't blame zlib: POSIX locking semantics are so horribly
 	   broken that they should be ripped out. */
-	return grab_contents(gzfd, size);
+	return lzgrab(lzfd, size);
 }
 
 /* gzopen handles uncompressed files transparently. */
 void *grab_file(const char *filename, unsigned long *size)
 {
-	gzFile gzfd;
+	lzFile lzfd;
 	void *buffer;
 
-	gzfd = gzopen(filename, "rb");
-	if (!gzfd)
+	lzfd = lzopen(filename, "rb");
+	if (!lzfd)
 		return NULL;
-	buffer = grab_contents(gzfd, size);
-	gzclose(gzfd);
+	buffer = lzgrab(lzfd, size);
+	lzclose(lzfd);
 	return buffer;
 }
 
--- module-init-tools-3.2/configure
+++ module-init-tools-3.2/configure
@@ -1741,7 +1741,7 @@
 #define CONFIG_USE_ZLIB 1
 _ACEOF
 
-  zlib_flags="-Wl,-Bstatic -lz -Wl,-Bdynamic"
+  zlib_flags="-Wl,-Bdynamic -lz -llz"
 fi
 fi;
 
