# SliTaz package receipt.

PACKAGE="linux"
VERSION="3.2.14"
KBASEVER="${VERSION:0:3}"
CATEGORY="base-system"
SHORT_DESC="The Linux kernel and modules."
MAINTAINER="devel@slitaz.org"
TARBALL="$PACKAGE-$KBASEVER.tar.xz"
WEB_SITE="http://www.kernel.org/"
WGET_URL="http://www.kernel.org/pub/linux/kernel/v3.0/$TARBALL"
HOST_ARCH="i486 arm x86_64"

DEPENDS="kmod"
BUILD_DEPENDS="slitaz-toolchain perl git xz lzma patch uclibc-cross-compiler-x86_64"
[ "$KBASEVER" != "$VERSION" ] && PATCH="http://www.kernel.org/pub/linux/kernel/v3.0/patch-$VERSION.xz"

# Aufs enable chroot
AUFS_NOT_SUPPORTED="uclibc-cross-compiler-x86_64 is not compatible with aufs 8("

# This will save/restore the modules.dep but we want to regenerate it
# on install/upgrade.
#CONFIG_FILES="/lib/modules/$KBASEVER-slitaz/modules.dep"

case "$ARCH" in
	arm)
		# Old school way :-) Until ARM was tested on real hardware and
		# we know wich modules/features we realy need for ARM machines.
		# No deps on kmod since we use Busybox modutils for ARM.
		#TARBALL="$PACKAGE-$VERSION.tar.bz2"
		DEPENDS=""
		BUILD_DEPENDS="xz" ;;
esac

# Rules to configure and make the package.
compile_rules()
{
	cd $src

	case "$ARCH" in
		arm)
			echo "Compiling: ARM Kernel"
			if [ ! -f $SRC/$(basename $PATCH) ]; then
				wget $PATCH -O $SRC/$(basename $PATCH)
			fi
			make mrproper &&
			xzcat $SRC/$(basename $PATCH) | patch -Np1
			cp -f $stuff/$ARCH/linux-slitaz.config .config &&
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- bzImage &&
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- modules &&
			make ARCH=$ARCH CROSS_COMPILE=${HOST_SYSTEM}- \
				INSTALL_MOD_PATH=$DESTDIR modules_install &&
			mkdir -p $DESTDIR/boot &&
			mv arch/arm/boot/compressed/vmlinux \
				$DESTDIR/boot/linux-$VERSION-slitaz-$ARCH
			return 0 ;;
		x86_64)
			echo "TODO: Maybe use default ? But cross compile in x86_64 chroot"
			echo "so we can remove the 64 build by uclibc-cross-compiler-x86_64"
			return 0 ;;
	esac

	# this is code to help update the kernel version faster
	#for i in $(grep -l 'WANTED="linux"' $WOK/*/receipt)
	#do
	#	sed -i 's|VERSION="OLDVERSION"|VERSION="NEWVERSION"|g' $i
	#done

	[ ! -x /usr/bin/cook ] && report open-bloc

	# Check for Aufs and cook it if unbuilt.
	echo "Checking for Aufs packages..."
	_AUFSVER=`grep ^VERSION= $WOK/aufs/receipt | cut -d "=" -f2 | sed -e 's/"//g'`
	if [ -x /usr/bin/cook ]; then
		# Give info an redirect to /dev/null since aufs got it own log.
		AUFSDIR=$WOK/aufs/source/aufs-${_AUFSVER}
		[ -d "$AUFSDIR" ] && rm -rf $AUFSDIR
		#echo "Cook: aufs $_AUFSVER"
		cook aufs --getsrc
		mkdir -p $WOK/aufs/source/
		tar xjf $SRC/aufs-${_AUFSVER}.tar.bz2 -C $WOK/aufs/source/
	elif [ -x /usr/bin/tazwok ]; then
		# we just need aufs source. Also cooking now is a bad idea since it
		# needs linux-module-headers. The one your cooking not the one from the web.
		AUFSDIR=$WOK/aufs/aufs-${_AUFSVER}
		[ -d "$AUFSDIR" ] && rm -rf $AUFSDIR
		tazwok get-src aufs --target=$AUFSDIR || { report close-bloc; return 1; }
	fi
	echo "cook:linux" > $command

	echo "Copying Aufs files and patches..."
	cp -a $AUFSDIR/Documentation $AUFSDIR/fs $AUFSDIR/include $src
	cp -a $AUFSDIR/aufs3-*.patch $stuff

	# SliTaz db
	[ -d $WOK/$PACKAGE/source/slitaz ] && rm -rf $WOK/$PACKAGE/source/slitaz 2> /dev/null
	mkdir -p $WOK/$PACKAGE/source/slitaz
	echo "$WGET_URL" > $WOK/$PACKAGE/source/slitaz/url
	cp $stuff/gztazmod.sh $stuff/list_modules.sh $WOK/$PACKAGE/source/slitaz
	cp $stuff/bootloader.sh $WOK/$PACKAGE/source/slitaz

	# Apply patches
	echo "Applying patches..."
	while read patch_file; do
		echo "$patch_file" >> $WOK/$PACKAGE/source/slitaz/patches
		cp $stuff/$patch_file $WOK/$PACKAGE/source/slitaz
		if [ -f done.$patch_file ]; then
			echo "Skipping $patch_file"
			continue
		fi
		echo "Apply $patch_file"
		if [ -x /usr/bin/cook ]; then
			patch -p1 < $WOK/$PACKAGE/source/slitaz/$patch_file || return 1
		elif [ -x /usr/bin/tazwok ]; then
			patch -p1 < $WOK/$PACKAGE/source/slitaz/$patch_file || { report close-bloc; return 1; }
		fi
		touch done.$patch_file
	done <<EOT
$PACKAGE-diff.u
$PACKAGE-header.u
$PACKAGE-freeinitrd.u
aufs3-base.patch
aufs3-standalone.patch
aufs3-loopback.patch
aufs3-proc_map.patch
channel-negative-one-maxim.patch
mac80211.compat08082009.wl_frag+ack_v1.patch
EOT

	if [ "$KBASEVER" != "$VERSION" ]; then
		if [ -f $SOURCES_REPOSITORY/$(basename $PATCH) ]; then
			xzcat $SOURCES_REPOSITORY/$(basename $PATCH) | patch -Np1
			touch done.patch-$VERSION
		else
			wget $PATCH -O $SRC/$(basename $PATCH)
			xzcat $SRC/$(basename $PATCH) | patch -Np1
			touch done.patch-$VERSION
		fi
	fi

	sed -i 's|SUBLEVEL =.*|SUBLEVEL =|g' Makefile

	[ ! -x /usr/bin/cook ] && report step "Make kernel proper and then build lguest"
	[ -x /usr/bin/cook ] && echo "Make kernel proper and then build lguest"
	make mrproper
	cd Documentation/virtual/lguest
	if [ -x /usr/bin/cook ]; then
		make lguest || return 1
	elif [ -x /usr/bin/tazwok ]; then
		make lguest || { report close-bloc; return 1; }
	fi
	cd $src

	case "$opt" in
	*--no64*);;
	*)
	#
	# Arch x86_64
	#
	[ ! -x /usr/bin/cook ] && report step "Make bzImage64 without modules first"
	[ -x /usr/bin/cook ] && echo "Building x86_64 Kernel"

	# Build bzImage64 without modules first
	cp -f $stuff/$PACKAGE-slitaz.config64 .config
	sed -i 's/CONFIG_MODULES=y/# CONFIG_MODULES is not set/' .config

	# We can't keep every driver in staging
	sed -i -e 's/^CONFIG_RTL8192/#&/' \
	       -e 's/^CONFIG_R8187SE/#&/' \
	       -e 's/^CONFIG_RT2870/#&/' .config
	yes '' | make ARCH=x86_64 oldconfig
	if [ -x /usr/bin/cook ]; then
		make -j 4 ARCH=x86_64 CROSS_COMPILE=uclibc-x86_64- bzImage || exit 1
	elif [ -x /usr/bin/tazwok ]; then
		make -j 4 ARCH=x86_64 CROSS_COMPILE=uclibc-x86_64- bzImage || { report close-bloc; return 1; }
	fi
	[ -d $PWD/_pkg ] || mkdir -p $DESTDIR/linux64
	mv arch/x86/boot/bzImage $DESTDIR/linux64
	mv System.map System.map-without-modules64

	[ ! -x /usr/bin/cook ] && report step "Now build bzImage64 with modules"

	# Build bzImage64 with modules
	cp -f $stuff/$PACKAGE-slitaz.config64 .config
	#make ARCH=x86_64 oldconfig
	ln .config $WOK/$PACKAGE/slitaz/config64
	make -j 4 ARCH=x86_64 CROSS_COMPILE=uclibc-x86_64- bzImage &&
	make -j 4 ARCH=x86_64 CROSS_COMPILE=uclibc-x86_64- modules &&
	make ARCH=x86_64 INSTALL_MOD_PATH=$DESTDIR/linux64 modules_install &&
	make ARCH=x86_64 INSTALL_HDR_PATH=$DESTDIR/linux64/usr headers_install &&
	if [ -x /usr/bin/cook ]; then
		[ -s arch/x86/boot/bzImage ] || return 1
	elif [ -x /usr/bin/tazwok ]; then
		[ -s arch/x86/boot/bzImage ] || { report close-bloc; return 1; }
	fi
	mkdir -p $DESTDIR/linux64/boot 2> /dev/null
	mv arch/x86/boot/bzImage $DESTDIR/linux64/boot/vmlinuz-$VERSION-slitaz
	ln System.map System.map-modules64
	ln Module.symvers Module.symvers-modules64
	esac

	#
	# Standard kernel
	#
	[ ! -x /usr/bin/cook ] && report step "Make bzImage without modules first"
	[ -x /usr/bin/cook ] && echo "Building standard kernel..."

	# Build bzImage without modules first
	cp -f $stuff/$PACKAGE-slitaz.config .config
	sed -i 's/CONFIG_MODULES=y/# CONFIG_MODULES is not set/' .config

	# We can't keep every driver in staging
	sed -i -e 's/^CONFIG_RTL8192/#&/' \
	       -e 's/^CONFIG_R8187SE/#&/' \
	       -e 's/^CONFIG_RT2870/#&/' .config
	yes '' | make oldconfig
	if [ -x /usr/bin/cook ]; then
		make -j 4 bzImage || exit 1
	elif [ -x /usr/bin/tazwok ]; then
		make -j 4 bzImage || { report close-bloc; return 1; }
	fi
	[ -d $DESTDIR ] || mkdir -p $DESTDIR
	mv arch/x86/boot/bzImage $DESTDIR
	mv System.map System.map-without-modules

	[ ! -x /usr/bin/cook ] && report step "Now build bzImage with modules"

	# Build bzImage with modules
	cp -f $stuff/$PACKAGE-slitaz.config .config
	#make oldconfig
	ln .config $WOK/$PACKAGE/source/slitaz/config
	make -j 4 bzImage &&
	make -j 4 modules &&
	make INSTALL_MOD_PATH=$DESTDIR modules_install &&
	make INSTALL_HDR_PATH=$DESTDIR/usr headers_install &&
	if [ -x /usr/bin/cook ]; then
		[ -s arch/x86/boot/bzImage ] || return 1
	elif [ -x /usr/bin/tazwok ]; then
		[ -s arch/x86/boot/bzImage ] || { report close-bloc; return 1; }
	fi
	mkdir -p $DESTDIR/boot 2> /dev/null
	mv arch/x86/boot/bzImage $DESTDIR/boot/vmlinuz-$VERSION-slitaz

	[ ! -x /usr/bin/cook ] && report step "Compressing all modules"

	# Compress all modules.
	$stuff/gztazmod.sh $DESTDIR/lib/modules/$KBASEVER-slitaz
	$stuff/gztazmod.sh $DESTDIR/linux64/lib/modules/$KBASEVER-slitaz
	ln System.map System.map-modules
	ln Module.symvers Module.symvers-modules

	if [ ! -x /usr/bin/cook ]; then
		report close-bloc
	fi
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	case "$ARCH" in
		arm)
			echo "Packing: ARM Kernel"
			cp -a $install/* $fs
			rm -f $fs/lib/modules/*/build $fs/lib/modules/*/source
			return 0 ;;
		x86_64)
			echo "TODO: use default or custom x86_64 packing"
			return 0 ;;
	esac

    export PACKAGE VERSION
    local path
    cp -a $_pkg/boot $fs
    # Compress all modules.
    $stuff/gztazmod.sh $_pkg/lib/modules/$KBASEVER-slitaz
    path=$fs/lib/modules/$KBASEVER-slitaz/kernel
    mkdir -p $path
    cp -a $_pkg/lib/modules/$KBASEVER-slitaz/mo* \
		$fs/lib/modules/$KBASEVER-slitaz
    # Get the base modules
    export src
    export _pkg
    mkdir -p $WOK/$PACKAGE/source/tmp
    $stuff/list_modules.sh \
	$(cat $stuff/modules.list) > $WOK/$PACKAGE/source/tmp/modules.list
    while read module; do
    	dir=$(dirname $module)
    	[ -d $path/$dir ] || mkdir -p $path/$dir
        cp -a $_pkg/lib/modules/$KBASEVER-slitaz/kernel/$module $path/$dir
    done < $WOK/$PACKAGE/source/tmp/modules.list
    # Remove unresolved links
    rm -f $fs/lib/modules/$KBASEVER-slitaz/build
    rm -f $fs/lib/modules/$KBASEVER-slitaz/source
    # Cook all packages with a kernel module
    for i in $(cd $WOK; grep -l 'tazwok cook linux$' */receipt)
    do
    	echo tazwok cook ${i%/receipt}
    done
    # Fixed modules.dep to use right path
    # saves 100kb of space too
    sed -i "s|$_pkg||g" $fs/lib/modules/$KBASEVER-slitaz/modules.dep
    sed -i "s|99.98.$KBASEVER-slitaz|$KBASEVER-slitaz|g" $fs/lib/modules/$KBASEVER-slitaz/modules.dep
    # Check and echo any module in kernel .config that's not added to
    # one of linux-* pkgs
    $stuff/check_modules.sh
}

# Pre and post install commands for Tazpkg.
post_install()
{
    echo "Processing post-install commands..."
    case "$ARCH" in
		arm)
			echo "Kernel : /boot/linux-$VERSION-slitaz-$ARCH"
			echo "Modules: /lib/modules/$VERSION-slitaz"
			return 0 ;;
	esac
    chroot "$1/" depmod -a $KBASEVER-slitaz
    # GRUB stuff.
    if [ -f "$1/boot/grub/menu.lst" ]; then
    	root_dev=`cat $1/boot/grub/menu.lst | grep root= | sed 's/.*root=\([^ ]*\).*/\1/' | head -n 1`
		grub_dev=`cat $1/boot/grub/menu.lst | grep "root (" | head -n 1`
		# Add new kernel entry in case of upgrade for installed system.
		if ! grep -q vmlinuz-$VERSION-slitaz $1/boot/grub/menu.lst; then
    		cat >> $1/boot/grub/menu.lst << EOT

title SliTaz GNU/Linux (Kernel $VERSION-slitaz)
$grub_dev
kernel /boot/vmlinuz-$VERSION-slitaz root=$root_dev
EOT
		fi
		# Display information message.
    	cat <<EOT
----
GRUB is installed, these tree lines must be in your /boot/grub/menu.lst:

title  SliTaz GNU/Linux (Kernel $VERSION-slitaz)
$grub_dev
kernel /boot/vmlinuz-$VERSION-slitaz root=$root_dev
----
EOT
	fi
}
