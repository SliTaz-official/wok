--- linux-3.2.53/fs/romfs/super.c
+++ linux-3.2.53/fs/romfs/super.c
@@ -74,6 +74,8 @@
 #include <linux/uaccess.h>
 #include "internal.h"
 
+#define MS_ROMFS_WITH_DATE	MS_VERBOSE
+
 static struct kmem_cache *romfs_inode_cachep;
 
 static const umode_t romfs_modemap[8] = {
@@ -302,6 +304,7 @@
 	unsigned nextfh;
 	int ret;
 	umode_t mode;
+	unsigned long spec;
 
 	/* we might have to traverse a chain of "hard link" file entries to get
 	 * to the actual file */
@@ -312,11 +315,12 @@
 
 		/* XXX: do romfs_checksum here too (with name) */
 
+		spec = be32_to_cpu(ri.spec);
 		nextfh = be32_to_cpu(ri.next);
 		if ((nextfh & ROMFH_TYPE) != ROMFH_HRD)
 			break;
 
-		pos = be32_to_cpu(ri.spec) & ROMFH_MASK;
+		pos = spec & ROMFH_MASK;
 	}
 
 	/* determine the length of the filename */
@@ -352,6 +356,12 @@
 		i->i_fop = &romfs_dir_operations;
 		if (nextfh & ROMFH_EXEC)
 			mode |= S_IXUGO;
+		spec &= 0xf;
+		if (spec != 0) {
+			sb->s_flags |= MS_ROMFS_WITH_DATE;
+			set_nlink(i, spec);
+		}
+		spec = i->i_size;
 		break;
 	case ROMFH_REG:
 		i->i_fop = &romfs_ro_fops;
@@ -367,16 +377,40 @@
 		i->i_data.a_ops = &romfs_aops;
 		mode |= S_IRWXUGO;
 		break;
+	case ROMFH_SCK:
+	case ROMFH_FIF:
+		spec = 0;
 	default:
 		/* depending on MBZ for sock/fifos */
-		nextfh = be32_to_cpu(ri.spec);
-		init_special_inode(i, mode, MKDEV(nextfh >> 16,
-						  nextfh & 0xffff));
+		init_special_inode(i, mode, MKDEV(spec >> 16,
+						  spec & 0xffff));
+		spec = i->i_size;
+		i->i_size = 0;
 		break;
 	}
 
 	i->i_mode = mode;
 
+	if (sb->s_flags & MS_ROMFS_WITH_DATE) {
+
+	        int signed_spec = spec;
+
+		i->i_uid  = signed_spec >> 20;
+		i->i_gid  = (spec >> 12) & 0xFF;
+		if (spec & 0100) 
+			i->i_gid |= ~0xFF;	/* sign extention */
+		i->i_mode &= ~07677;
+		i->i_mode |= spec & 07677;
+
+	/* backward compatibility for blocks and char devices
+	 * when spec is 0, uid = gid = 0 = root and mode is rw- --- ---
+	 * so, these devices have a null size with old romfs code
+	 */
+		i->i_mode ^= 0600;
+
+	        i->i_mtime.tv_sec = i->i_atime.tv_sec = 
+		i->i_ctime.tv_sec = ntohl(ri.checksum);
+	}
 	unlock_new_inode(i);
 	return i;
 
@@ -428,6 +462,7 @@
 		(romfs_maxsize(dentry->d_sb) + ROMBSIZE - 1) >> ROMBSBITS;
 	buf->f_fsid.val[0] = (u32)id;
 	buf->f_fsid.val[1] = (u32)(id >> 32);
+	sb->s_flags &= MS_ROMFS_WITH_DATE;
 	return 0;
 }
 
