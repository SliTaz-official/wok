--- linux-2.6.30.6/arch/x86/boot/header.S
+++ linux-2.6.30.6/arch/x86/boot/header.S
@@ -6,7 +6,7 @@
  *	Based on bootsect.S and setup.S
  *	modified by more people than can be counted
  *
- *	Rewritten as a common file by H. Peter Anvin (Apr 2007)
+ *	Rewritten Pascal Bellard (Nov 2009)
  *
  * BIG FAT NOTE: We're in real mode using 64k segments.  Therefore segment
  * addresses must be multiplied by 16 to obtain their respective linear
@@ -27,6 +27,8 @@
 
 BOOTSEG		= 0x07C0		/* original address of boot-sector */
 SYSSEG		= 0x1000		/* historical load address >> 4 */
+INITSEG		= 0x9000		/* boot address >> 4 */
+SETUPSEG	= 0x9020		/* setup address >> 4 */
 
 #ifndef SVGA_MODE
 #define SVGA_MODE ASK_VGA
@@ -40,53 +42,412 @@
 #define ROOT_RDONLY 1
 #endif
 
+/* some extra features */
+#define	EDIT_CMDLINE		on hotkey
+#define SHOW_REGS		show int13 status & parameters
+
 	.code16
 	.section ".bstext", "ax"
 
 	.global bootsect_start
 bootsect_start:
+	cld				# assume nothing
+stacktop	= 0x9E00		# in 0x8000 .. 0xA000
+zeroed		= 48+10			# gdt + zeroed registers
+	movw	$stacktop-12-zeroed, %di	# stacktop is an arbitrary value >=
+					# length of bootsect + length of
+					# setup + room for stack;
+					# 12 is disk parm size.
+	pushw	$INITSEG
+	popw	%es			# %es = INITSEG
+
+	pushw	%es
+	popw	%ss			# %ss and %es already contain INITSEG
+	movw	%di, %sp		# put stack at INITSEG:stacktop-...
+
+# Many BIOS's default disk parameter tables will not recognize
+# multi-sector reads beyond the maximum sector number specified
+# in the default diskette parameter tables - this may mean 7
+# sectors in some cases.
+#
+# Since single sector reads are slow and out of the question,
+# we must take care of this by creating new parameter tables
+# (for the first disk) in RAM.  We can set the maximum sector
+# count to 36 - the most we will encounter on an ED 2.88.  
+#
+# High doesn't hurt.  Low does.  Let's use the max: 63
+#
+# Segments are as follows: %es = %ss = INITSEG,
+
+	xorw	%ax, %ax		# %ax = 0
+	movw	$zeroed/2, %cx		# clear gdt + offset, %ds, limits
+	rep				# don't worry about cld
+	stosw				# already done above
+	popw	%bx			# offset = 0
+	popw	%ds			# %ds = 0
+	popw	%gs			# %gs = 0
+
+	movb	setup_sects+0x7C00, %al	# read bootsector + setup (%ds = 0)
+	incw	%ax
+
+	pushw	%es
+	pushw	%di			# %ds:%bx+0x78 is parameter table address
+	ldsw	0x78(%bx), %si		# %ds:%si is source
+	movb	$6, %cl			# copy 12 bytes
+	rep				# don't worry about cld
+	movsw				# already done above
+	popl	%gs:0x78(%bx)		# update parameter table address
+	pushw	%es
+	popw	%ds			# now %ds = %es = %ss = INITSEG
+	movb	$63, 0x4-12(%di)	# patch sector count, %di = stacktop
+	cli
+
+	xchg	%ax, %di		# sector count
+	popw	%ax			# limits = 0
+	incw	%cx			# cylinder 0, sector 1
+	call	read_first_sectors	# read setup
+
+offset_version	= 0xE
+	movw	$0x200,%si
+	addw	offset_version(%si),%si	# starting protocol 2.00, Kernel 1.3.73
+	call	putstr			# show which kernel we are loading
+
+# The cmdline can be entered and modifed at boot time.
+# Only characters before the cursor are passed to the kernel.
+	popw	%bx			# clear %bx
+	orw	cmd_line_ptr, %bx
+	jz	nocmdline
+	pushw	%bx
+	incw	%di
+	call	read_sectors
+	popw	%si
+	call	putstr
+#ifdef	EDIT_CMDLINE
+cmdlp:
+	movb	$0x20, %al		# clear end of line
+	int	$0x10			#  with Space
+	movb	$8, %al			#   and BackSpace
+	int	$0x10
+	decw	%si
+cmdget:
+	call	wait4key
+	cmpb	$8, %al			# BackSpace ?
+	je	cmdbs
+	movb	%al, (%si)		# store char
+	lodsw				# %si += 2
+cmdbs:
+#if 1
+	cmpw	%si,cmd_line_ptr
+	je	cmdget
+#endif
+	call	putc			# set %ah and %bx
+	cmpb	$10, %al		# Enter ?
+	jne	cmdlp
+	movb	%bh,-2(%si)		# set end of string and remove CR
+endcmdline:
+#endif
+nocmdline:
 
-	# Normalize the start address
-	ljmp	$BOOTSEG, $start2
-
-start2:
-	movw	%cs, %ax
-	movw	%ax, %ds
-	movw	%ax, %es
-	movw	%ax, %ss
-	xorw	%sp, %sp
-	sti
-	cld
-
-	movw	$bugger_off_msg, %si
+# This routine loads the system at address SYSSEG, making sure
+# no 64kB boundaries are crossed. We try to load it as fast as
+# possible, loading whole tracks whenever we can.
+
+ramdisk_image	=	0x0218
+ramdisk_size	=	0x021C
+	movw	%sp, %si		# for bootsect_gdt
+	decw	16(%si)			# bootsect_src = 64Kb
+	decw	24(%si)			# bootsect_dst = 64Kb
+	movw	$syssize, %di
+type_of_loader	=	0x210
+loadflags	=	0x211
+heap_end_ptr	=	0x224
+ksyssize	= 	500
+	orw	$0x80FF, type_of_loader-ksyssize(%di) # loader type = 0xFF
+	movw	$stacktop-0x200, heap_end_ptr-ksyssize(%di)
+	movb	$0x10, %al		# destination = 0x100000
+	movb	$5, %cl
+initrdlp:
+	decw	%ax
+	movb	$0x93,%ah
+	movw	%ax, 28(%si)		# bootsect_dst_base+2
+	movb	$(SYSSEG/4096), %al	# source = SYSSEG
+	movw	%ax, 20(%si)		# bootsect_src_base+2
+	cbw
+	cwde
+	shlw	%cl, %ax
+	decw	%ax
+	addl	(%di),%eax
+	shrl	%cl, %eax
+syslp:
+	pushw	$SYSSEG
+	popw	%es
+	movw	$128,%di		# 64Kb
+	subw	%di, %ax		# max 32M > int 15 limit
+	pushf
+	jnc	not_last
+	addw	%ax, %di
+not_last:
+	xorw	%bx, %bx		# clear %bx
+	pushw	%ax
+#if defined(SHOW_REGS)
+	pushw	%si
+	call	read_sectors
+	popw	%si
+#else
+	call	read_sectors
+#endif
+	movw	$0x8000, %cx		# full 64K
+	movb	$0x87, %ah
+	incb	28(%si)			# bootsect_dst_base+2
+	int	$0x15			# max 16M
+	popw	%ax
+	popf
+	ja	syslp
+	movw	ramdisk_image+2,%ax
+	movw	$ramdisk_size,%di
+	movb	$9, %cl
+	cmpb	%al,28(%si)
+	jb	initrdlp
+
+# This procedure turns off the floppy drive motor, so
+# that we enter the kernel in a known state, and
+# don't have to worry about it later.
+
+#if 1
+kill_motor:
+	xchgw	%ax, %bx		# reset FDC
+	int	$0x13
+#else
+kill_motor:
+	movw	$0x3f2, %dx
+	xchgw	%ax, %bx
+	outb	%al, %dx
+#endif
 
-msg_loop:
-	lodsb
-	andb	%al, %al
-	jz	bs_die
-	movb	$0xe, %ah
-	movw	$7, %bx
+# After that (everything loaded), we jump to the setup-routine
+# loaded directly after the bootblock:
+# Segments are as follows: %ds = %ss = INITSEG
+
+	ljmp	$SETUPSEG, $0
+
+# read_sectors reads %di sectors into %es:0 buffer.
+# %es:0 is updated to the next memory location.
+# First, sectors are read sector by sector until
+# sector per track count is known. Then they are
+# read track by track.
+# Assume no error on first track.
+
+#define FLOPPY_CYLINDERS	80	/* 80 cylinders minimum */
+#define FLOPPY_HEADS		2	/* 2 heads minimum */
+#define FLOPPY_SECTORS		18	/* 18 sectors minimum */
+
+#ifdef SHOW_REGS
+print_loop:
+	movb	$0x6 + 'A' - 1, %al
+	subb	%cl, %al
+	movw	$regs, %si		# caller %si is saved
+	call	putcs			# putc(%al) + putstr(%si)
+# it will print out all of the registers.
+	popw	%bp			# load word into %si
+	jmp	print_all		# print %bp (status)
+#endif
+check_limits:
+#ifndef SHOW_REGS
+	popw	%dx
+#endif
+	cmpb	$FLOPPY_SECTORS+1, %cl	# 18 sectors minimum
+	jb	check_head
+        cmpb    %al, %cl		# max sector known ?
+        ja	next_head		#   no -> store it
+check_head:
+	cmpb	$FLOPPY_HEADS, %dh	# 2 heads minimum
+	jb	check_cylinder
+        cmpb    %ah, %dh		# max head known ?
+        ja	next_cylinder		#   no -> store it
+check_cylinder:
+	pushaw
+#ifdef SHOW_REGS
+	cmpw	$0x600,%bp		# disk changed ?
+	je	reset_floppy
+	pushw	%es			# print %es (named EX)
+	pushw	%dx			# print %dx
+	pushw	%cx			# print %cx
+	pushw	%bx			# print %bx
+	xchgw	%ax, %si
+	movb	$2,%ah
+	pushw	%ax			# print %ax
+	movb	$6,%cl
+print_all:
+	movb	$4, %ch			# 4 hex digits
+print_digit:
+	rolw	$4, %bp			# rotate to use low 4 bits
+	movb	$0x0f, %al
+	andw	%bp, %ax		# %al = mask for nybble
+	addb	$0x90, %al		# convert %al to ascii hex
+	daa				# in only four instructions!
+	adcb	$0x40, %al
+	daa
+	call	putc			# set %ah and %bx
+	decb	%ch
+	jnz	print_digit
+	movb	$0x20, %al		# SPACE
 	int	$0x10
-	jmp	msg_loop
-
-bs_die:
-	# Allow the user to press a key, then reboot
-	xorw	%ax, %ax
+	loop	print_loop
+	call	wait
+	cbw				# %ah = 0
+reset_floppy:
+#else
+	cbw				# %ah = 0
+#endif
+        int     $0x13			# reset controler
+	popaw
+read_sectorslp:
+	pushw	%dx			# some bios break dx...
+        pushw   %ax			# limits
+	subb	%cl, %al		# sectors remaining in track
+	ja	tolastsect
+	movb	$1, %al			# 1 sector mini
+tolastsect:
+	cbw
+	cmpw	%di, %ax
+	jb	more1trk
+	movw	%di, %ax		# sectors to read
+more1trk:
+	pushw	%ax			# save context
+	movb	$2, %ah			# cmd: read chs
+        int     $0x13
+#ifdef SHOW_REGS
+	xchgw	%ax, %bp		# status
+#endif
+# ifdef SHOW_REGS
+	popw	%si			# save %ax
+        popw    %ax			# limits
+	popw	%dx
+# else
+	popw	%dx			# save %ax
+        popw    %ax			# limits
+# endif
+	jc	check_limits
+	xchgw	%ax, %bp
+# ifdef SHOW_REGS
+update_regs:
+	incw	%cx			# next sector
+	movw	%cx, %fs
+	addb	$2,%bh			# next location
+	decw	%di			# update sector counter
+	jz	putcdot
+	decw	%si
+	jnz	update_regs
+# else
+	addw	%dx,%cx			# next sector
+	addb	%dl,%bh
+	addb	%dl,%bh			# next location
+	subw	%dx,%di			# update sector counter
+	popw	%dx
+	jz	putcdot
+# endif
+read_sectors:
+	movw	%fs, %cx
+	xchgw	%ax, %bp
+        cmpb    %al,%cl			# reach sector limit ?
+        jne     bdendlp
+next_head:
+        movb    %cl,%al
+        incb    %dh			# next head
+        movb    $1,%cl			# first sector
+        cmpb    %ah, %dh		# reach head limit ?
+        jne     bdendlp
+next_cylinder:
+        movb    %dh,%ah
+# NOTE : support 256 cylinders max
+        incb    %ch			# next cylinder
+read_first_sectors:
+        movb    $0,%dh			# first head
+cylinder_count	= 496
+        cmpb    $FLOPPY_CYLINDERS,%ch	# reach cylinder limit ?
+        jb	bdendlp
+	cmpb	cylinder_count, %ch
+        jb	bdendlp
+next_floppy:
+	movb	$0,%ch			# first cylinder
+	pushaw
+	movw	$swap_floppy,%si
+	incb	12(%si)
+	pushw	%bx
+	call	putstr
+	popw	%bx
+waitfloppy:
+	call	wait
+	jne	waitfloppydone
+	pushw	%dx			# some bios break dx...
+	cbw
+	int	$0x13			# reset FDC
+	movw	$0x201,%ax
+#	cwd
+#	movw	$1,%cx
+	int	$0x13			# read first sector
+	popw	%dx
+	rclb	$1,%ah			# floppy changed 06=>0D no error 00
+	cmpb	-2(%si), %ah		# 0D then 00
+	jne	waitfloppy		# no => try again
+	incw	%si
+	orb	%ah,%ah			# was 00 ?
+	jne	waitfloppy
+waitfloppydone:
+	popaw
+bdendlp:
+        jmp	read_sectorslp
+
+putcdot:
+	pushw	%ss
+	popw	%es			# restore es
+	movb	$0x2e+3, %al 		# loading... message 2e = .
+putclf:
+	subb	$3, %al
+putc:
+	movb	$0xe, %ah
+	movw	$7, %bx			#   one dot each 64k
+ 	int	$0x10
+	cmp	$0xd, %al		# CR ?
+	je	putclf
+	ret
+
+putstr:
+	movb	$0xd, %al		# CR
+putcs:
+	call	putc
+	lodsb
+	orb	%al,%al			# end of string is \0
+	jnz	putcs
+	ret
+
+clock	= 0x46C
+wait:
+wait4key:
+	movw	$clock, %di
+#define DELAY 5
+	movb	$(DELAY*182)/10,%cl
+	addb	%gs:(%di),%cl
+waitkbd:
+	movw	$0x10D, %ax		# test keyboard, timeout => CR
+	cmpb	%gs:(%di),%cl
+	je	waitdone
 	int	$0x16
-	int	$0x19
+	jz	waitkbd
+	cbw
+	int	$0x16			# eat char
+	movw	%di, %gs		# disable timeout
+	incw	%di			# clear Z
+waitdone:
+	ret
 
-	# int 0x19 should never return.  In case it does anyway,
-	# invoke the BIOS reset code...
-	ljmp	$0xf000,$0xfff0
-
-	.section ".bsdata", "a"
-bugger_off_msg:
-	.ascii	"Direct booting from floppy is no longer supported.\r\n"
-	.ascii	"Please use a boot loader program instead.\r\n"
-	.ascii	"\n"
-	.ascii	"Remove disk and press any key to reboot . . .\r\n"
-	.byte	0
+#ifdef SHOW_REGS
+regs:		.asciz	"X:"
+#endif
 
+swap_floppy:	.ascii	"Insert disk 1"
+		.ascii	"."
+		.byte	7,13,0
 
 	# Kernel attributes; used by setup.  This is part 1 of the
 	# header, from the old boot sector.
