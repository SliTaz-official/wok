--- linux-3.2.53/arch/x86/boot/header.S
+++ linux-3.2.53/arch/x86/boot/header.S
@@ -7,12 +7,14 @@
  *	modified by more people than can be counted
  *
  *	Rewritten as a common file by H. Peter Anvin (Apr 2007)
+ *	Rewritten by Pascal Bellard (Nov 2009)
  *
  * BIG FAT NOTE: We're in real mode using 64k segments.  Therefore segment
  * addresses must be multiplied by 16 to obtain their respective linear
  * addresses. To avoid confusion, linear addresses are written using leading
  * hex while segment addresses are written as segment:offset.
  *
+ * Assume protocol 2.00+ (kernel >= 1.3.73)
  */
 
 #include <asm/segment.h>
@@ -27,6 +29,8 @@
 
 BOOTSEG		= 0x07C0		/* original address of boot-sector */
 SYSSEG		= 0x1000		/* historical load address >> 4 */
+INITSEG		= 0x9000		/* boot address >> 4 */
+SETUPSEG	= 0x9020		/* setup address >> 4 */
 
 #ifndef SVGA_MODE
 #define SVGA_MODE ASK_VGA
@@ -40,54 +44,752 @@
 #define ROOT_RDONLY 1
 #endif
 
+setup_sects	= 497
+syssize		= 500
+vgamode		= 506
+cmd_line_ptr	= 0x228
+
+/* some extra features */
+#define EXE_SUPPORT		real mode dos .exe file support
+#define CMDLINE			kernel >= 2.4
+#define OLDCMDLINE		kernel  < 2.4
+#define HELP			display version for ? argument
+#define MORETHAN16M		up to 4Gb RAM, not 16Mb
+#define KEYBOARDLESS_SUPPORT	scan floppy swap each 5 seconds
+
+/* some limitations to reduce the code size */
+//#define REALMODE_NOT_CHECKED	exe crash when started in vm86
+//#define FLOPPY_1440K_ONLY	1.44M floppies support only (no 720K, 1.68M, 2.88M...)
+
+#ifdef FLOPPY_ONLY
+#undef EXE_SUPPORT
+#undef FLOPPY_1440K_ONLY
+#define EDIT_CMDLINE
+#define	CMDLINE_SUPPORT
+#define MOVE_CMDLINE
+#define INITRD_SUPPORT
+#define INITRD_AUTOADDR
+#endif
+
+#ifdef EXE_ONLY
+#undef KEYBOARDLESS_SUPPORT
+#define INITRD_SUPPORT
+#define INITRD_KEYWORD
+#define INITRD_AUTOADDR
+#endif
+
 	.code16
 	.section ".bstext", "ax"
 
 	.global bootsect_start
 bootsect_start:
 
-	# Normalize the start address
-	ljmp	$BOOTSEG, $start2
+stacktop	= 0x9E00		# in 0x8000 .. 0xA000
+zeroed		= 48+10			# gdt + zeroed registers
+.macro	INIT_REGS
+	movw	$stacktop-zeroed, %di	# stacktop is an arbitrary value >=
+					# length of bootsect + length of
+					# setup + room for stack;
+					# 12 is disk parm size.
+	pushw	$INITSEG
+	popw	%ss			# %ss contain INITSEG
+	movw	%di, %sp		# put stack at INITSEG:stacktop-...
+	pushw	%ss
+	popw	%es			# %es = %ss = INITSEG
+	xorw	%ax, %ax		# %ax = 0
+#if defined(CMDLINE)
+	movw	$zeroed+1, %cx		# clear gdt + offset, %ds, limits, cmdline=""
+	rep				# don't worry about cld
+	stosb				# already done above
+	decw	%di
+#else
+	movw	$zeroed/2, %cx		# clear gdt + offset, %ds, limits
+	rep				# don't worry about cld
+	stosw				# already done above
+#endif
+	popw	%bx			# offset = 0
+.endm
 
-start2:
-	movw	%cs, %ax
-	movw	%ax, %ds
-	movw	%ax, %es
-	movw	%ax, %ss
-	xorw	%sp, %sp
-	sti
-	cld
+#ifdef EXE_SUPPORT
+#define CODESZ		0x8000
+#define EXEADRS(x)	x+0xE0
+	decw	%bp			// Magic number: MZ
+	popw	%dx
+#ifdef EXE_ONLY
+	.word	512			// Bytes on last page of file
+#else
+	jmp	fdstart			// Bytes on last page of file
+#endif
+	.word	(CODESZ+511)/512	// Pages in file
+	.word	0			// Relocations
+	.word	2			// Size of header in paragraphs
+	.word	4096			// Minimum extra paragraphs needed
+	.word	-1			// Maximum extra paragraphs needed
+	.word	(CODESZ+15)/16		// Initial (relative) SS value
+	.word	stacktop+4		// Initial SP value (+callf)
+	.word	0			// Checksum
+	.word	EXEADRS(comstart)	// Initial IP value
+	.word	0xFFF0			// Initial (relative) CS value
+#ifdef EXE_ONLY
+//	.word	0x001C			// File address of relocation table
+//	.word	0,0,0			// Overlay number
+	.ascii	"(SliTaz)"
+#else
+swap_floppy:
+	.ascii	"Next!"
+	.byte	7,13,0			# swap detection needs 13, 0
+#endif
+#ifdef OLDCMDLINE
+# ifdef	CMDLINE_SUPPORT
+	.word	0			# 0xA33F
+	.word	0			# stacktop
+# else
+	.word	0xA33F
+	.word	stacktop
+# endif
+#endif
+#ifndef EXE_ONLY
+fdstart:
+	pushw	%dx
+#endif
+#endif
 
-	movw	$bugger_off_msg, %si
+LOADSEG		= 0x8000		# 0x1000 multiple, up to 512K zImage
+LOADSZ		= 0x10000
+#ifdef EXE_SUPPORT
+A20BUFFER	= 0x68000		# a20 gate / himem.sys support
+#define USEA20BUFFER
+#endif
 
-msg_loop:
+#ifndef EXE_ONLY
+# bootsect_start:
+#ifdef EXE_SUPPORT
+	call	initregs
+	cwd				# floppy = head = 0
+#else
+	INIT_REGS
+#endif
+	popw	%ds			# %ds = 0
+	movb	setup_sects+0x7C00, %al	# read bootsector + setup
+	incw	%ax			# %ax = setup_sects+bootsect
+	popw	%fs			# %fs = 0
+
+# Many BIOS's default disk parameter tables will not recognize
+# multi-sector reads beyond the maximum sector number specified
+# in the default diskette parameter tables - this may mean 7
+# sectors in some cases.
+#
+# Since single sector reads are slow and out of the question,
+# we must take care of this by creating new parameter tables
+# (for the first disk) in RAM.  We can set the maximum sector
+# count to 36 - the most we will encounter on an ED 2.88.  
+#
+# High doesn't hurt.  Low does.  Let's use the max: 63
+
+	ldsw	0x78(%bx), %si		# %ds:%bx+0x78 is parameter table address
+	popw	%di
+	pushw	%es
+	pushw	%di
+#ifdef	CMDLINE_SUPPORT
+	movw	$0, %bp			# patched by installer (7C22)
+skipcmdline:
+#define cmd_line_ptr	0x22
+#endif
+	movb	$6, %cl			# copy 12 bytes
+	rep				# don't worry about cld
+	  movsw				# already done above
+	pushw	%ss
+	popw	%ds			# now %ds = %es = %ss = INITSEG
+	popl	%fs:0x78(%bx)		# update parameter table address
+	movb	$63, 0x4-12(%di)	# patch sector count, %di = stacktop
+	cli
+
+	xchg	%ax, %di		# sector count
+#ifndef FLOPPY_1440K_ONLY
+	popw	%ax			# limits = 0
+#endif
+	incw	%cx			# cylinder 0, sector 1, clear Z
+	call	read_first_sectors	# read setup
+#endif
+loadsys:
+	movw	$0x200,%si
+type_of_loader	=	0x10
+loadflags	=	0x11
+heap_end_ptr	=	0x24
+	orw	$0x8020, type_of_loader(%si) # loader type = 0x20 = bootsect-loader
+	movb	$(stacktop-0x300)/256, heap_end_ptr+1(%si)
+	call	puts_version		# show which kernel we are loading
+
+#ifdef	CMDLINE_SUPPORT
+# The cmdline can be entered and modifed at boot time.
+# Only characters before the cursor are passed to the kernel.
+
+	xorw	%si, %si
+	orw	cmd_line_ptr-7(%bx), %si
+	jz	nocmdline
+	movw	$0xA33F, cmd_line_ptr-2-7(%bx)
+	call	puts
+#if defined(MOVE_CMDLINE) || (defined(EDIT_CMDLINE) && defined(KEYBOARDLESS_SUPPORT))
+	pushw	%di
+#endif
+#ifdef	EDIT_CMDLINE
+cmdlp:
+	movb	$0x20, %al		# clear end of line
+cmdlpz:
+	call	putc			#  with Space
+	subb	$0x18, %al		#   and BackSpace
+	jnc	cmdlpz
+	decw	%si
+cmdget:
+#ifdef KEYBOARDLESS_SUPPORT
+	call	wait4key
+#else
+	int	$0x16
+#endif
+	cbw				# %ah = 0, get keyboard character
+	cmpb	$8, %al			# BackSpace ?
+	je	cmdbs
+	movb	%al, (%si)		# store char
+	lodsw				# %si += 2
+cmdbs:
+	cmpw	%si, cmd_line_ptr-7(%bx)
+	je	cmdget
+	call	putc
+	cmpb	$13, %al		# Enter ?
+	jne	cmdlp
+	movb	%bh,-2(%si)		# set end of string and remove CR
+endcmdline:
+#endif
+#ifdef MOVE_CMDLINE
+	pushw	%ss
+	popw	%es
+	movw	$0x8000, %di
+	movw	%di, %si
+	xchgw	%si, cmd_line_ptr-7(%bx)
+	movb	$0x2, %ch
+	rep
+	  movsb
+#endif
+#if defined(EDIT_CMDLINE) || (defined(MOVE_CMDLINE) && defined(KEYBOARD_TIMEOUT))
+	popw	%di
+#endif
+nocmdline:
+#endif
+
+# This routine loads the system at address LOADSEG, making sure
+# no 64kB boundaries are crossed. We try to load it as fast as
+# possible, loading whole tracks whenever we can.
+
+ramdisk_image	=	0x0218
+ramdisk_size	=	0x021C
+bootsect_src_limit	= 16
+bootsect_dst_limit	= 24
+bootsect_src_base	= 18
+bootsect_dst_base	= 26		# bits  0..23
+bootsect_dst_base_hi	= 31		# bits 24..31
+	popw	%bx			# clear %bx
+	movw	%sp, %si		# for bootsect_gdt
+init_gdt:
+	decw	bootsect_src_limit(%bx,%si)	# max 64Kb
+	movw	$0x9300+(LOADSEG/0x1000), bootsect_src_base+2(%bx,%si)
+	xorb	$bootsect_dst_limit-bootsect_src_limit, %bl
+	jne	init_gdt
+#ifdef INITRD_SUPPORT
+#ifdef INITRD_AUTOADDR
+	movb	$0x88, %ah
+	int	$0x15
+	jc	NeedMoreRAM
+	cmpw	$0xC000, %ax		# more than 48M ?
+	jb	NeedMoreRAM
+	movw	$ramdisk_image+2, %bx
+	cmpw	$0x100, (%bx)		# already above 16M ?
+	ja	NeedMoreRAM
+	movw	$0x200, (%bx)		# initramfs @ 32M
+NeedMoreRAM:
+#endif
+#ifdef INITRD_KEYWORD
+#ifdef INITRD_AUTOADDR
+	pushl	-2(%bx)
+#else
+	pushl	ramdisk_image
+#endif
+	pushw	$stacktop		# start of cmdline
+#endif
+	movw	$syssize, %bx
+	movb	$5, %cl
+code32_start	=	0x214
+	movw	code32_start+1, %ax		# destination = 0x00100000 or 0x00010000
+initrdlp:
+	movl	(%bx), %ebx
+	decl	%ebx
+	shrl	%cl, %ebx
+#else
+code32_start	=	0x214
+	movw	code32_start+1, %ax		# destination = 0x00100000 or 0x00010000
+	movl	syssize, %ebx
+	decl	%ebx
+	shrl	$5, %ebx
+#endif
+#ifdef MORETHAN16M
+	incl	%ebx
+#else
+	incw	%bx
+#endif
+#ifdef USEA20BUFFER
+	movw	$0x00100000>>8, %di
+#endif
+syslp:
+#ifdef USEA20BUFFER
+	cmpw	%ax, %di
+	jne	nota20
+	xorw	$(0x00100000+A20BUFFER)>>8, %ax
+nota20:
+#endif
+	movw	%ax, bootsect_dst_base+1(%si)
+#ifdef MORETHAN16M
+	movl	$LOADSZ/512, %edi	# size in sectors
+	subl	%edi, %ebx
+#else
+	movw	$LOADSZ/512, %di	# size in sectors
+	subw	%di, %bx
+#endif
+	pushf
+	jnc	not_last
+	addw	%bx, %di
+not_last:
+	pushw	%ax
+	pushw	%si
+	pushw	%bx
+	xorw	%bx,%bx
+	pushw	$LOADSEG
+	popw	%es
+#ifdef EXE_ONLY
+	call	read_sectors_dos
+#else
+patchcall:
+	call	read_sectors		# update %bp
+#endif
+	popw	%bx
+	popw	%si
+	movw	%es, %cx		# word count = LOADSZ/2 (= LOADSEG)
+	movb	$0x87, %ah
+	pushw	%ss
+	popw	%es			# restore es
+	int	$0x15			# max 16M, maybe more...
+	popw	%ax
+#ifdef MORETHAN16M
+	addw	$0x100, %ax		# next dest (ax+=LOADSZ/256)
+	adcb	%cl, bootsect_dst_base_hi(%si)	# breaks 16M limit ?
+#else
+	incb	%ah			# next dest (ax+=LOADSZ/256)
+#endif
+#ifdef USEA20BUFFER
+	movw	$(LOADSZ+A20BUFFER)>>8, %di
+#endif
+	popf
+	ja	syslp
+#ifdef INITRD_SUPPORT
+initrdlp2:
+	movw	ramdisk_image+1,%ax
+	movw	$ramdisk_size,%bx
+	movb	$9, %cl
+	cmpw	%ax, bootsect_dst_base+1(%si)
+	jb	initrdlp
+#ifdef INITRD_KEYWORD
+	xorl	%eax, %eax
+	xchgl	%eax, (%bx)
+	addl	$3, %eax
+	addl	%eax, ramdisk_image-ramdisk_size(%bx)
+	andb	$0xFC, ramdisk_image-ramdisk_size(%bx)
+	popw	%si		// current ptr in cmdline
+kwchk:
+	movw	$kwinitrd, %di
+kwchk2:
+#if 1
+	cmpl	$0x3D616776, (%si)	// look for vga=
+	jne	notvga
+#if 1
+	movw	$0x312C, %ax
+	subw	4(%si), %ax	// support -9 .. -1 only !
+	xchgb	%al, %ah
+	cmpw	$-8, %ax
+	jb	notvga
+	decw	%ax
+#else
+	movb	$'0', %al
+	subb	5(%si), %al	// support -9 .. -1 only !
+	cbw
+#endif
+	movw	%ax, vgamode
+notvga:
+#endif
+	lodsb			// look for initrd=
+	orb	%al, %al
+	jz	noinitrd
+	subb	(%di), %al
+	//andb	$0xDF, %al
+	jne	kwchk
+	incw	%di
+	cmpb	(%di), %al
+	jne	kwchk2
+	mov	%si, %dx	// %ds:%dx filename
+chkeos:
 	lodsb
-	andb	%al, %al
-	jz	bs_die
+	cmpb	$0, %al
+	je	gotoes
+	subb	$0x20, %al
+	jne	chkeos
+gotoes:
+	decw	%si
+	pushw	(%si)
+	movb	%al, (%si)	// set eos
+	movb	$0x3D, %ah	// open, access = RO
+	int	$0x21
+	popw	(%si)
+	jc	noinitrd
+	pushw	%si		// save ptr in cmdline
+	xchgw	%ax, %bp	// fd
+	movw	$0x4202, %ax	// lseek(SEEK_END)
+	movw	%bp, %bx
+	xorw	%cx, %cx
+	cwd
+	int	$0x21
+	pushw	%dx
+	pushw	%ax
+	popl	ramdisk_size
+	movw	$0x4200, %ax	// lseek(SEEK_SET)
+	xorw	%cx, %cx
+	cwd
+	int	$0x21		// set %ax = %dx = 0
+	jmp	initrdlp2
+noinitrd:
+	popl	%eax		// restore initial ramdisk address
+	movl	%eax, %edx
+	xchgl	%edx, ramdisk_image-ramdisk_size(%bx)
+	subl	%eax, %edx
+	addl	%edx, (%bx)
+#endif
+#endif
+#ifdef USEA20BUFFER
+#ifdef MORETHAN16M
+#ifdef INITRD_SUPPORT
+	movb	$0, bootsect_dst_base_hi(%si)
+#else
+	movb	%cl, bootsect_dst_base_hi(%si)
+#endif
+#endif
+	movb	$0x10, bootsect_dst_base+2(%si)
+	movw	$A20BUFFER/0x100, bootsect_src_base+1(%si)
+	movb	$0x87, %ah
+	int	$0x15
+#endif
+
+# This procedure turns off the floppy drive motor, so
+# that we enter the kernel in a known state, and
+# don't have to worry about it later.
+
+kill_motor:
+	xchgw	%ax, %di		# reset FDC (%di < 128)
+	int	$0x13
+
+# After that (everything loaded), we jump to the setup-routine
+# loaded directly after the bootblock:
+# Segments are as follows: %ds = %ss = INITSEG
+
+	ljmp	$SETUPSEG, $0
+
+# read_sectors reads %di sectors into %es:0 buffer.
+# %es:0 is updated to the next memory location.
+# First, sectors are read sector by sector until
+# sector per track count is known. Then they are
+# read track by track.
+# Assume no error on first track.
+
+#ifndef EXE_ONLY
+
+#define FLOPPY_CYLINDERS	80	
+#define FLOPPY_HEADS		2	
+
+check_limits:
+#ifndef FLOPPY_1440K_ONLY
+	popw	%dx
+        cmpb    %al, %cl		# max sector known ?
+        ja	next_head		#   no -> store it
+#endif
+	pushaw
+        int     $0x13			# reset controler
+	stc
+	call	putcdot			# print '-'
+read_sectorslp:
+	popaw
+bdendlp:
+	pushw	%dx			# some bios break dx...
+#ifndef FLOPPY_1440K_ONLY
+        pushw   %ax			# limits
+	subb	%cl, %al		# sectors remaining in track
+	ja	tolastsect
+	movb	$1, %al			# 1 sector mini
+tolastsect:
+#else
+#define FLOPPY_SECTORS		18
+	mov	$FLOPPY_SECTORS+1, %al
+	subb	%cl, %al		# sectors remaining in track
+	cbw
+#endif
+	cmpw	%di, %ax
+	jb	more1trk
+	movw	%di, %ax		# sectors to read
+more1trk:
+	pushw	%ax			# save context
+	movb	$2, %ah			# cmd: read chs
+        int     $0x13
+#ifndef FLOPPY_1440K_ONLY
+	popw	%dx			# save %ax
+        popw    %ax			# limits
+#else
+	popw	%ax			# restore context
+	popw	%dx
+#endif
+	jc	check_limits
+#ifndef FLOPPY_1440K_ONLY
+	xchgw	%ax, %bp
+	addw	%dx,%cx			# next sector
+	movw	%cx, %gs
+	addb	%dl,%bh
+	addb	%dl,%bh			# next location
+	subw	%dx,%di			# update sector counter
+	popw	%dx
+	jz	putcdot
+#else
+	addw	%ax,%cx			# next sector
+	movw	%cx, %gs
+	addb	%al,%bh
+	addb	%al,%bh			# next location
+	subw	%ax,%di			# update sector counter
+	jz	putcdot
+#endif
+read_sectors:
+	movw	%gs, %cx
+#ifndef FLOPPY_1440K_ONLY
+#   al is last sector+1
+#   ah is 0
+	xchgw	%ax, %bp
+#endif
+#ifndef FLOPPY_1440K_ONLY
+        cmpb    %al,%cl			# reach sector limit ?
+        jne     bdendlp
+next_head:
+        movb    %cl,%al
+#else
+        cmpb    $FLOPPY_SECTORS+1,%cl	# reach sector limit ?
+        jne     bdendlp
+#endif
+        movb    $1, %cl			# first sector
+inc_head:
+        xorb    %cl, %dh		# next head
+        jne	bdendlp			# reach head limit ?
+        incb    %ch			# next cylinder
+read_first_sectors:
+        cmpb    $FLOPPY_CYLINDERS,%ch	# reach cylinder limit ?
+        jne	bdendlp
+next_floppy:
+	movb	$0,%ch			# first cylinder
+	pushaw
+#ifdef FLOPPY_ONLY
+	movw	$swap_floppy_tail,%si
+next_digit:
+	decw	%si
+	movb	(%si), %al
+	incw	%ax
+	aaa
+	movb	%al, (%si)
+	jc	next_digit
+#endif
+	movw	$swap_floppy,%si
+#ifdef KEYBOARDLESS_SUPPORT
+	pushw	%bx
+	call	puts
+	popw	%bx
+waitfloppy:
+	call	wait
+	jne	waitfloppydone
+	pushw	%dx			# some bios break dx...
+	cbw
+	int	$0x13			# reset FDC
+	movw	$0x201,%ax
+	int	$0x13			# read first sector
+	popw	%dx
+	rclb	$1,%ah			# floppy changed 06=>0D no error 00
+	cmpb	-2(%si), %ah		# 0D then 00
+	jne	waitfloppy		# no => try again
+	incw	%si
+	decw	%ax			# was 0001 ?
+	jne	waitfloppy
+waitfloppydone:
+#else
+	call	puts
+	cbw				# %ah = 0, get keyboard character
+	int	$0x16
+#endif
+        jmp	read_sectorslp
+#endif
+
+#ifdef EXE_SUPPORT
+read_sectors_dos:
+	xorw	%dx, %dx	// write to %ds:%dx, not %es:%bx
+	call	read_sectors_dosz
+read_sectors_dosz:
+	pushw	%es
+	popw	%ds
+	movb	$0x3F, %ah	// read
+	movw	%di, %cx
+	shlw	$8, %cx		// byte count / 2
+	movw	%bp, %bx
+	int	$0x21
+	xchgw	%ax, %dx
+	pushw	%ss
+	popw	%ds
+#endif
+
+putcdot:
+	movb	$'.'+3, %al	// . = success, - = failure
+putclf:
+	sbbb	$3, %al
+putc:
 	movb	$0xe, %ah
-	movw	$7, %bx
-	int	$0x10
-	jmp	msg_loop
+	movw	$7, %bx			#   one dot each 64k
+ 	int	$0x10
+	cmp	$0xd, %al		# CR ?
+	je	putclf
+	ret
 
-bs_die:
-	# Allow the user to press a key, then reboot
-	xorw	%ax, %ax
+#ifdef KEYBOARDLESS_SUPPORT
+clock	= 0x46C
+wait:
+wait4key:
+	movw	$clock, %di
+#define DELAY 5
+	movb	$257-(DELAY*182)/10, %fs:(%di)
+waitkbd:
+	movw	$0x10D, %ax		# test keyboard, timeout => CR
+	cmpb	%fs:(%di),%ah
+	je	waitdone
 	int	$0x16
-	int	$0x19
+	jz	waitkbd
+	cbw
+	int	$0x16			# eat char
+	movw	%di, %fs		# disable timeout
+	incw	%di			# clear Z
+waitdone:
+	ret
+#endif
 
-	# int 0x19 should never return.  In case it does anyway,
-	# invoke the BIOS reset code...
-	ljmp	$0xf000,$0xfff0
+#ifdef EXE_SUPPORT
+comstart:
+#ifndef EXE_ONLY
+	call	initregs
+#else
+	INIT_REGS
+#endif
+	movb	EXEADRS(setup_sects), %al	# read bootsector + setup
+	incw	%ax
+#ifdef CMDLINE
+	movw	$0x80, %si
+	movb	(%si), %cl
+	incw	%si
+# ifdef OLDCMDLINE
+#  ifdef CMDLINE_SUPPORT
+	jcxz	nocmdline
+	movw	%di, EXEADRS(0x22)
+	movw	$0xA33F, 0x7F(%si)
+#  endif
+# endif
+	rep
+	  movsb
+nocmdline:
+	xchgw	%ax, %di
+# ifdef HELP
+	cmpb	$'?', -1(%si)
+	movw	$EXEADRS(0x200), %si
+	je	puts_version
+#  ifndef REALMODE_NOT_CHECKED
+	smsww	%ax
+	andb	$1, %al
+	jne	puts_version			// real mode only...
+#  endif
+# endif
+#else
+	xchgw	%ax, %di
+#endif
+	movw	0x2C(%bx), %ds	// DOS 3.0+
+loop1:
+	incw	%bx
+	cmpw	%cx, (%bx)
+	jne	loop1
+	leaw	4(%bx), %dx 	// %ds:%dx filename
+#if !defined(REALMODE_NOT_CHECKED) && defined(CMDLINE) && defined(HELP)
+	movb	$0x3D, %ah	// open, access = RO
+#else
+	movw	$0x3D00, %ax	// open, access = RO
+#endif
+	int	$0x21
+	jc	dosexit
+	xchgw	%ax, %bp	// fd
+	call	read_sectors_dos	// update %ds
+#ifndef EXE_ONLY
+	addb	$read_sectors_dos-read_sectors, patchcall+1
+#endif
+#ifdef CMDLINE
+# ifdef OLDCMDLINE
+	movw	$0x202, %bx
+	cmpw	%bx, 0x206-0x202(%bx)	# new cmdline for version >= 0x202
+	jb	oldcmdline
+	movw	$INITSEG/16+stacktop/256, cmd_line_ptr+1-0x202(%bx)
+# else
+	movw	$INITSEG/16+stacktop/256, cmd_line_ptr+1
+# endif
+oldcmdline:
+#endif
+//	ljmp	$INITSEG, $loadsys
+	pushw	%ds
+	.byte	0x6A, loadsys-bootsect_start
+	lretw
+#endif
+	
+#define kernel_version_offset	0xE
+puts_version:
+	addw	kernel_version_offset(%si),%si	# starting protocol 2.00, Kernel 1.3.73
+puts:
+	movb	$0xd, %al		# CR
+putcs:
+	call	putc
+	lodsb
+	cmpb	$0, %al			# end of string is any byte <= 0
+	jg	putcs
+dosexit:
+	ret	
 
-	.section ".bsdata", "a"
-bugger_off_msg:
-	.ascii	"Direct booting from floppy is no longer supported.\r\n"
-	.ascii	"Please use a boot loader program instead.\r\n"
-	.ascii	"\n"
-	.ascii	"Remove disk and press any key to reboot . . .\r\n"
-	.byte	0
+#if !defined(FLOPPY_ONLY) && !defined(EXE_ONLY)
+initregs:
+	popw	%si
+	INIT_REGS
+	pushw	%si			# use new stack
+	ret
+#endif
 
+#ifndef EXE_SUPPORT
+swap_floppy:
+	.ascii	"Insert floppy disk 001"
+swap_floppy_tail:
+	.ascii	" and press any key."
+	.byte	7,13,0			# swap detection needs 13, 0
+#endif
 
+#ifdef INITRD_KEYWORD
+kwinitrd:
+	.ascii	"initrd="
+	.byte	0
+#endif
 	# Kernel attributes; used by setup.  This is part 1 of the
 	# header, from the old boot sector.
 
