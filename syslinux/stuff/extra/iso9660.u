--- core/fs/iso9660/iso9660.c
+++ core/fs/iso9660/iso9660.c
@@ -89,6 +89,24 @@
     return true;
 }
 
+#define __ROCKRIDGE
+#ifdef __ROCKRIDGE
+static size_t rockname(const struct iso_dir_entry *de, char **name)
+{
+	size_t len, delen, n = (de->name_len + 34) & -2;
+	char *data = (char *) de;
+	
+	for (delen = 0; n + 2 < de->length; n += len) {
+		len = data[n + 2];
+		if (* (short *) (data + n) == 0x4D4E) { /* NM */
+			*name = data + n + 5;
+			delen = len - 5;
+		}
+	}
+	return delen;
+}
+#endif
+
 /*
  * Find a entry in the specified dir with name _dname_.
  */
@@ -132,6 +150,20 @@
 	
 	de_name_len = de->name_len;
 	de_name = de->name;
+#ifdef __ROCKRIDGE
+	{
+		char *name;
+		size_t len = rockname(de, &name);
+
+		if (len) {
+			name[len] = 0;
+			if (!strcmp(name, dname)) {
+				dprintf("Found rockridge.\n");
+				return de;
+			}
+		}
+	}
+#endif
 	if (iso_compare_name(de_name, de_name_len, dname)) {
 	    dprintf("Found.\n");
 	    return de;
@@ -217,11 +249,22 @@
     dirent->d_ino = 0;           /* Inode number is invalid to ISO fs */
     dirent->d_off = file->offset;
     dirent->d_type = get_inode_mode(de->flags);
-    dirent->d_reclen = offsetof(struct dirent, d_name) + 1 +
-	iso_convert_name(dirent->d_name, de->name, de->name_len);
+    iso_convert_name(dirent->d_name, de->name, de->name_len);
 
+#ifdef __ROCKRIDGE
+	{
+		char *name;
+		size_t len = rockname(de, &name);
+
+		if (len) {
+			strcpy(dirent->d_name, name);
+			dirent->d_name[len] = 0;
+		}
+	}
+#endif
+    dirent->d_reclen = offsetof(struct dirent, d_name) + 1 + strlen(dirent->d_name);
     file->offset += de->length;  /* Update for next reading */
-    
+
     return 0;
 }
 
