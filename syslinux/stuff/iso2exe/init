#!/bin/sh

DIALOG=dialog

get()
{
	od -j $1 -N ${3:-2} -t u${3:-2} -An $2 2> /dev/null ||
	dd if=$2 bs=1 skip=$1 count=${3:-2} 2> /dev/null | \
		hexdump -e "\"\" 1/${3:-2} \"%d\""
}

getarg()
{
	sed "/$1=/!d;s/.*$1=\\([^ ]*\\).*/\\1/" /proc/cmdline
}

gettazboot()
{
	echo "Creating $(basename $1) ..."
	O=$(($(get 34 /mnt/$ISO) - 0xE0))
	L=$((0x8000 - $(get 28 /mnt/$ISO) - $O))
	S=$((32+$L))
	P=$((($S+511)/512))
	E=$((4096-(32*$P)))
	for i in 0x5A4D $(($S%512)) $P 0 2 $E -1 $((${2:-0}-16)) \
			-2 0 256 -16 28 0x6C53 0x5469 0x7A61; do 
		printf '\\\\x%02X\\\\x%02X' $(($i&255)) $((($i>>8)&255)) | \
			xargs echo -en
	done > $1
	dd bs=1 count=$L skip=$(echo $O) if=/mnt/$ISO >> $1 2> /dev/null
}

checkmagic()
{
	[ -s $1 ] && [ $(getarg magic) == $(get 28 $1 4) ]
}

getiso()
{
	mkdir -p /media/cdrom
	blkid | while read dev info ; do
		mount ${dev%:} /mnt
		if checkmagic /mnt/$ISO; then
			mount -o loop,ro /mnt/$ISO /media/cdrom
			echo "Found $ISO on ${dev%:}"
			break
		fi
		umount /mnt
	done
}

uncpio()
{
	echo "Extracting $(basename $1) ..."
	case $(get 0 $1) in
	*35615)	zcat $1 ;;
	*\ 93)	unlzma -c $1 ;;
	*)	cat $1 ;;
	esac | ( cd ${2:-/} ; cpio -idmu > /dev/null 2>&1 )
}

getuuid()
{
	dev=$(mount | sed '/ \/mnt /!d;s/ .*//;s|/dev/||;q')
	blkid | sed "/$dev:/!d;s/.*UUID=.\\([^ ]*\\)\".*/\\1/"
}

mkinitrd()
{
	echo "Creating $(basename $1) ..."
	for i in bin lib dev proc tmp mnt etc ; do
		mkdir -p /tmp/fs/$i
	done
	for i in /dev/console /dev/null /dev/tty /dev/tty1 /dev/fuse \
		 /dev/hd* /dev/sd* ; do
		cp -a $i /tmp/fs$i
	done
	for i in /bin/busybox $(which mount.posixovl) $(which blkid); do
		cp $(LD_TRACE_LOADED_OBJECTS=1 /lib/ld*.so $i | \
		sed 's|.*=> \(.*/lib/l[^ ]*\).*|\1|;/^\//!d') /tmp/fs/lib
		cp $i /tmp/fs/bin
	done
	cp -a /lib/ld-* /tmp/fs/lib
	for i in $(busybox | sed '/Current/,$!d'); do
		ln -s busybox /tmp/fs/bin/${i%,}
	done
	ln -s /proc/mounts /tmp/fs/etc/mtab
	cat > /tmp/fs/init <<EOT
#!/bin/sh

arg()
{
	grep -q \$1 /proc/cmdline &&
	val="\$(sed "s/.*\$1=\\([^ ]*\\).*/\\1/" < /proc/cmdline)" &&
	echo "\$2 \$val"
}

mount -t proc /proc /proc
arg mount "Mount device"
mount \$( (blkid /dev/?d* || blkid) | grep \$val | sed 's/:.*//;q') /mnt
arg subroot "Change root to directory"
mount.posixovl /mnt/\$val
mount --bind /mnt /mnt/\$val/mnt/dos
LDSO=\$(ls /mnt/\$val/lib/ld-* | sed q)
umount /proc
export LD_LIBRARY_PATH=\$val/lib:\$val/usr/lib:/lib
exec /bin/switch_root /mnt \${LDSO#/mnt/} \$val/usr/sbin/chroot \$val /sbin/init
EOT
	chmod +x /tmp/fs/init
	( cd /tmp/fs ; find * | cpio -o -H newc ) | lzma e $1 -si 2> /dev/null
	rm -rf /tmp/fs
}

is_loram()
{
	[ -s /lib/squashfs.ko* ]
}

doinstall()
{
	mkdir /mnt/slitaz
	mount.posixovl /mnt/slitaz || return
	mkdir -p /mnt/slitaz/boot /mnt/slitaz/mnt/dos
	if [ -d /media/cdrom/fs ]; then
		cp -a /media/cdrom/fs/. /mnt/slitaz
	elif is_loram ; then
		for i in /media/cdrom/boot/rootfs?.* ; do
			[ -s $(basename $i) ] && continue
			cpio -i $i
		done
		for i in $(ls -r /media/cdrom/boot/rootfs*); do
			mount -o loop,ro $i /sqfs/mnt
			cp -a /sqfs/mnt/. /mnt/slitaz
			umount -d /sqfs/mnt
		done
	else
		for i in $(ls -r /media/cdrom/boot/rootfs*); do
			uncpio $i /mnt/slitaz
		done
	fi
	for i in /media/cdrom/boot/bzImage /media/cdrom/boot/*pxe* \
		/media/cdrom/boot/isolinux/he* /media/cdrom/boot/isolinux/opt* \
		/media/cdrom/README /media/cdrom/boot/memtest* ; do
		[ -s $i ] && cp $i /mnt/slitaz/boot
	done
	umount -d /media/cdrom
	gettazboot /mnt/slitaz/boot/tazboot.exe
	mkinitrd /mnt/slitaz/boot/initrd
	cat > /mnt/slitaz/boot/tazboot.cmd <<EOT
kernel=\\slitaz\\boot\\bzimage
initrd=\\slitaz\\boot\\initrd
rw root=/dev/null mount=$(getuuid) subroot=slitaz autologin
EOT
	unix2dos /mnt/slitaz/boot/he* /mnt/slitaz/boot/opt* \
		/mnt/slitaz/boot/README /mnt/slitaz/boot/tazboot.cmd
	[ -x /mnt/slitaz/usr/sbin/mount.posixovl ] ||
	cp $(which mount.posixovl) /mnt/slitaz/usr/sbin
	! grep -qs tazboot /mnt/boot.ini && cat >> /mnt/boot.ini <<EOT
C:\\slitaz\\boot\\tazboot.exe="SliTaz"
EOT
	grep -qs menuitem /mnt/config.sys && !grep -q tazboot /mnt/config.sys &&
	sed -i 's/menudefault=/menuitem=slitaz,SliTaz\n&/' /mnt/config.sys &&
	cat >> /mnt/config.sys <<EOT
[slitaz]
device=\\slitaz\\boot\\tazboot.exe
EOT
}

install()
{
	$DIALOG --clear \
		--title " SliTaz UMSDOS like installation " \
		--yes-label "Install" --yesno \
"\nSliTaz will be installed in the subdirectory \\slitaz of the current
DOS/Windows partition. You will see your files from /mnt/dos.\n\n
You can start SliTaz with \\slitaz\\boot\\tazboot.exe\n\n
To uninstall SliTaz, you have only to remove this directory.
The file \\boot.ini or \\config.sys may be modified too.\n\n
To do a traditional installation with disk partitioning,
start SliTaz Live with 'SliTaz RAM boot' menu.\n
" 16 70
	[ $? -eq 0 -a -n "$(which mount.posixovl)" ] || return
	doinstall
	umount /proc
	exec chroot /mnt/slitaz /sbin/init
}

tazboot()
{
	$DIALOG --clear \
		--title " SliTaz bootloader for DOS " \
		--yes-label "Install" --yesno \
"\nThe file TAZBOOT.EXE will be created in the top directory. It supports
a bzImage linux kernel, multiple initramfs, a kernel command line and
an ISO image file loopback (retrieves files from an ISO file).\n\n
Usage: tazboot.exe [[@commands]|[kernel=<bzimage>] 
[initrd=<rootfs>[,<rootfs2>...]] [iso=<isofile>] cmdline args ...]\n\n
Defaults: tazboot @tazboot.cmd or tazboot kernel=bzImage auto\n\n\
Examples for tazboot.cmd:\n\n\
  iso=\\isos\\slitaz-4.0.iso\n\
  kernel=boot/bzImage\n\
  initrd=boot/rootfs4.gz,boot/rootfs3.gz,boot/rootfs2.gz,boot/rootfs1.gz\n\
  rw root=/dev/null autologin\n\n\
  kernel=\\slitaz\\vmlinuz root=/dev/sda5 ro\n\n
Unlike GRUB4DOS, it doesn't require unfragmented ISO image files.\n
" 24 78
	[ $? -eq 0 ] || return
	gettazboot /mnt/tazboot.exe
}

md5()
{
	echo "Checking files..."
	( cd /media/cdrom ; md5sum -c md5sum ) > /tmp/data
	$DIALOG --clear \
		--title " Checked files " \
		--textbox /tmp/data 24 78
	rm -f /tmp/data
}

readme()
{
	$DIALOG --clear \
		--title " Readme " \
		--textbox /media/cdrom/README 24 78
}

bootlog()
{
	$DIALOG --clear \
		--title " Linux boot messages " \
		--textbox /tmp/dmesg 24 78
}

memtest()
{
	$DIALOG --clear \
		--title " Memtest86 " \
		--yes-label "Install" --yesno \
"\nMemtest86 is a thorough, stand alone memory test for x86 architecture
computers. BIOS based memory tests are a quick, cursory check and often
miss many of the failures that are detected by Memtest86.\n
" 12 70
	[ $? -eq 0 ] || return
	cp /media/cdrom/boot/memtest /mnt
}

fdmemtest()
{
	$DIALOG --clear \
		--title " Create a Memtest86 boot floppy " \
		--yes-label "Create floppy" --yesno \
"\nMemtest86 is a thorough, stand alone memory test for x86 architecture
computers. BIOS based memory tests are a quick, cursory check and often
miss many of the failures that are detected by Memtest86.\n\n
Please insert a blank disk in floppy drive.\n
" 12 70
	[ $? -eq 0 ] || return
	dd if=/media/cdrom/boot/memtest of=/dev/fd0
}

gpxe()
{
	$DIALOG --clear \
		--title " SliTaz Web boot " \
		--yes-label "Install" --yesno \
"\nBoot your operating system from the internet and enjoy a full system
working entirely in RAM with speed and stability in mind. The Linux Kernel
and the complete SliTaz compressed root filesystem will be loaded into RAM
from the Web using PXE and HTTP protocols.\n
" 12 70
	[ $? -eq 0 ] || return
	cp /media/cdrom/boot/gpxe /mnt
}

fdgpxe()
{
	$DIALOG --clear \
		--title " Create a SliTaz Web boot floppy " \
		--yes-label "Create floppy" --yesno \
"\nBoot your operating system from the internet and enjoy a full system
working entirely in RAM with speed and stability in mind. The Linux Kernel
and the complete SliTaz compressed root filesystem will be loaded into RAM
from the Web using PXE and HTTP protocols.\n\n
Please insert a blank disk in floppy drive.\n
" 12 70
	[ $? -eq 0 ] || return
	dd if=/media/cdrom/boot/gpxe of=/dev/fd0
}

cdfile()
{
	[ -s /media/cdrom/$1 ] && echo -en "$2	${3// /.}"
}

usbkey()
{
	$DIALOG --clear \
		--title " Create a SliTaz USB key " \
		--yes-label "Continue" --yesno \
"\nUnlike a hard drive install, the filesystem is kept in a compressed
rootfs.gz. The filesystem is loaded entirely into memory upon boot.
This should increase responsiveness, protect the filesystem against
accidental corruption and reduce read/writes to the USB drive.
Once setup, the tazusb utility can rewrite the root filesystem
with any changes you have made since booting up, 
giving the effective benefits of a hard drive install.\n\n
/home is mounted on boot using the UUID of your particular flash drive.
Unlike a device name, the UUID has the benefit of never changing from machine
to machine.\n\n
Please plug your USB stick in now.\n 
" 18 70
	[ $? -eq 0 ] || return
	sleep 5
	DEV="$(grep -l 1 /sys/block/*/removable | \
		sed 's|/sys/block/\(.*\)/removable|\1|')"
	[ -n "$DEV" ] || return
	exec 3>&1
	device=`$DIALOG  --clear \
	--title " Select your USB key " \
	--menu "\nPlease select the USB key according to its known size.\n\n" \
	14 70 4 \
	$(for i in $DEV ; do
		echo "/dev/$i $(( $(cat /sys/block/$i/size) / 1024 ))MB"	 
	done) \
	2>&1 1>&3`
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ] || continue
	exec 3>&1
	format=`$DIALOG  --clear \
	--title " Select the filesystem " \
	--menu "\nPlease select the filesystem type to create.\n\n\
The filesystem creation will erase all the data \
in the USB key." 14 70 4 \
		"none"	"Do not erase the USB key" \
		"ext3"	"Ext3 journaling filesystem" \
		"ext2"	"Ext2 filesystem" \
		"fat32"	"Windows FAT32 filesystem" \
	2>&1 1>&3`
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ] || continue
	[ "$format" != "none" ] && tazusb format $device "SliTaz" $format
	tazusb gen-iso2usb /mnt/$ISO $device
}

mount_loram()
{
	is_loram || return
	insmod /lib/squashfs.ko* 2> /dev/null
	if [ -d /media/cdrom/fs ]; then
		ln -s /media/cdrom/fs /sqfs
	else
		mkdir /sqfs
		mount -o loop,ro -t squashfs /rootfs*.gz /sqfs
	fi
	ln -s /sqfs/lib/* lib
	ln -s /sqfs/usr /sqfs/var /
	for i in dmesg basename tr od reboot poweroff getty sync ; do
		ln -s /sqfs/bin/busybox /bin/$i
	done
}

umount_loram()
{
	is_loram || return
	rm  /var /usr
	umount -d /sqfs
	rmdir /sqfs
}

text()
{
	umount_loram
	umount -d /media/cdrom
	umount /mnt
	umount /proc
	exec /init
}

live()
{
	n=0
	for i in $(ls -r /media/cdrom/boot/rootfs*); do
		[ $((n++)) -eq 0 ] || uncpio $i
	done
	text
}

restart()
{
	sync
	[ ! -L /sqfs ] && umount -d /media/cdrom && umount /mnt
	reboot -f
}

stop()
{
	sync
	[ ! -L /sqfs ] && umount -d /media/cdrom && umount /mnt
	poweroff -f
}

shell()
{
	getty -n -l /bin/ash 38400 tty1 || sh
}

[ -x /usr/sbin/mount.posixovl ] ||
mv /bin/mount.posixovl.iso2exe /usr/sbin/mount.posixovl 2> /dev/null ||
mv /bin/mount.posixovl.iso2exe /bin/mount.posixovl
mount -t proc /proc /proc
ISO="$(getarg iso | sed 's/.://;s|\\|/|g')"
getiso
mount_loram
case "$(basename $ISO | tr [A-Z] [a-z])$(getarg mode)" in
*install*)	install ;;
*live*)		live ;;
*text*)		text ;;
esac
dmesg > /tmp/dmesg

while true; do
	exec 3>&1
	value=`$DIALOG  --clear \
	--title " Welcome to SliTaz " \
	--menu "\nPlease select" 17 70 9 \
			"live"		"SliTaz RAM boot" \
			"text"		"SliTaz RAM boot (text mode only)" \
$(cdfile README		"readme"	"Show the README file") \
$(cdfile md5sum		"md5"		"Check ISO files") \
			"install"	"Hard disk installation" \
			"usbkey"	"USB key installation" \
			"tazboot"	"Get tazboot.exe Linux loader" \
$(cdfile Xboot/memtest	"memtest"	"Get Memtest86") \
$(cdfile boot/memtest	"fdmemtest"	"Create a Memtest86 boot floppy") \
$(cdfile Xboot/gpxe	"gpxe"		"Get SliTaz Web boot utility") \
$(cdfile boot/gpxe	"fdgpxe"	"Create a SliTaz Web boot floppy") \
			"restart"	"Restart the computer" \
			"stop"		"Power off" \
			"bootlog"	"Linux boot messages" \
			"shell"		"Shell prompt" \
	2>&1 1>&3`
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ] || continue
	$value
done
