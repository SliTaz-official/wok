#!/bin/sh

DIALOG=dialog

ddq()
{
	dd $@ 2> /dev/null
}

get()
{
	od -j $1 -N ${3:-2} -t u${3:-2} -An $2 2> /dev/null ||
	hexdump -s $1 -n ${3:-2} -e "\"\" 1/${3:-2} \"%d\"" $2
}

getarg()
{
	sed "/$1=/!d;s/.*$1=\\([^ ]*\\).*/\\1/" /proc/cmdline
}

mount_proc()
{
	mount -t proc /proc /proc
	mount -t sysfs /sys /sys
	udevd --daemon 2> /dev/null && udevadm trigger && sleep 5
}

umount_proc()
{
	killall udevd 2> /dev/null
	umount /sys/fs/fuse/connections 2> /dev/null
	umount /sys
	umount /proc
}

bytes2bin()
{
	for i in $@ ; do
		printf '\\\\x%02X' $(($i&255)) | xargs echo -en
	done
}

words2bin()
{
	for i in $@ ; do
		printf '\\\\x%02X\\\\x%02X' $(($i&255)) $((($i>>8)&255)) | \
			xargs echo -en
	done
}

gettazboot()
{
	echo "Creating $(basename $1) ..."
	O=$(($(get 66 /mnt/$ISO) - 0xC0))
	L=$((0x7EE0 - $(get 24 /mnt/$ISO) - $O))
	S=$((32+$L))
	P=$((($S+511)/512))
	E=$((4096-(32*$P)))
	words2bin 0x5A4D $(($S%512)) $P 0 2 $E -1 $((${2:-0}-16)) \
			-2 0 256 -16 28 0x6C53 0x5469 0x7A61 > $1
	ddq bs=1 count=$L skip=$(echo $O) if=/mnt/$ISO >> $1
}

checkmagic()
{
	[ -s $1 ] && [ $(getarg magic) == $(get 24 $1 4) ]
}

getiso()
{
	mkdir -p /media/cdrom
	blkid | while read dev info ; do
		mount ${dev%:} /mnt
		if checkmagic /mnt/$ISO; then
			mount -o loop,ro /mnt/$ISO /media/cdrom
			echo "Found $ISO on ${dev%:}"
			break
		fi
		umount /mnt
	done
}

uncpio()
{
	echo -en "\n Extracting $(basename $1) ..."
	case $(get 0 $1) in
	*35615)	( zcat || gunzip ) ;;
	*14333) unxz ;;
	*\ 93)	unlzma ;;
	*)	cat ;;
	esac < $1 | ( cd ${2:-/} ; cpio -idmu > /dev/null 2>&1 )
}

dotwait()
{
	echo -n "${1:-Install filesystem}.."
	touch /tmp/wait
	while [ -e /tmp/wait ]; do
		echo -n "." > /dev/tty0
		sleep 1
	done &
}

getuuid()
{
	dev=$(mount | sed '/ \/mnt /!d;s/ .*//;s|/dev/||;q')
	blkid | sed "/$dev:/!d;s/.* UUID=.\\([^ ]*\\)\".*/\\1/"
}

tazusbinitfs()
{
	PAD=$(($(stat -c %s $1) % 4))
	[ $PAD -ne 0 ] && ddq if=/dev/zero bs=1 count=$((4 - $PAD)) >> $1
	mkdir -p /tmp/fs/etc /tmp/fs/lib /tmp/fs/home
	cp -a /etc/locale.conf /tmp/fs/etc 2> /dev/null
	cp -a /etc/keymap.conf /tmp/fs/etc 2> /dev/null
	sed 's/ .*//' /proc/modules | while read mod ; do
		find /lib/modules/ | grep $mod.ko | \
			sed 's|.*|cp & /tmp/fs/lib|' | sh
	done
	cat > /tmp/fs/init1 <<EOT
#!/bin/sh
sed -i 's|sbin/init|init2|' /init
exec /init
EOT
	cat > /tmp/fs/init2 <<EOT
#!/bin/sh

mount -t proc /proc /proc
  grep -q debug /proc/cmdline && debug=true && set -x
for i in /lib/*.ko* ; do insmod \$i 2> /dev/null ; done; sleep 2
v=\$(sed '/\\/home=/!d;s|.*/home=\\([^ ]*\\).*|\\1|' /proc/cmdline /cmdline 2> /dev/null)
mount / -o remount,rw
mkdir /mnt/dos
rm -f /cmdline 2> /dev/null
mount / -o remount,ro
mnt=/mnt/dos/\${v#*/}
dev=\$( (blkid /dev/[sh]d* || blkid) | grep \${v%%/*} | sed 's/:.*//;q')
echo "Mount \$dev in /mnt/dos for \$v..." | tee -a /run/boot.log
mount \$dev /mnt/dos
mount.posixovl -F \$mnt -- -oallow_other -odefault_permissions -osuid
mount --bind \$mnt /home
  [ "\$debug" = "true" ] && sh
umount /proc
exec /sbin/init
EOT
	chmod 755 /tmp/fs/init?
	cp -a /tmp/fs/* /
	( cd /tmp/fs ; find * | cpio -o -H newc ) | gzip -9 >> $1
}

mkinitrd()
{
	dotwait "Creating $(basename $1) "
	for i in bin lib dev proc tmp mnt etc ; do
		mkdir -p /tmp/fs/$i
	done
	for i in /dev/console /dev/null /dev/tty /dev/tty0 /dev/tty1 /dev/tty2 \
		 /dev/fuse /dev/hd* /dev/sd* ; do
		cp -a $i /tmp/fs$i
	done
	for i in /bin/busybox $(which mount.posixovl) $(which blkid); do
		cp $(LD_TRACE_LOADED_OBJECTS=1 /lib/ld*.so $i | \
		sed 's|.*=> \(.*/lib/l[^ ]*\).*|\1|;/^\//!d') /tmp/fs/lib
		cp $i /tmp/fs/bin
	done
	cp -a /lib/ld-* /tmp/fs/lib
	for i in $(busybox | sed '/Current/,$!d'); do
		[ -e /tmp/fs/bin/${i%,} ] || ln -s busybox /tmp/fs/bin/${i%,}
	done
	ln -s /proc/mounts /tmp/fs/etc/mtab
	sed 's/ .*//' /proc/modules | while read mod ; do
		find /lib/modules/ | grep $mod.ko | \
			sed 's|.*|cp & /tmp/fs/lib|' | sh
	done
	cat > /tmp/fs/init <<EOT
#!/bin/sh

arg()
{
	grep -q \$1 /proc/cmdline &&
	val="\$(sed "s/.*\$1=\\([^ ]*\\).*/\\1/" < /proc/cmdline)" &&
	echo "\$2 \$val"
}

mount -t proc /proc /proc
  arg debug "shell" && debug=true && set -x
for i in /lib/*.ko* ; do insmod \$i 2> /dev/null ; done; sleep 2
arg mount "Mount device"
mount \$( (blkid /dev/[sh]d* || blkid) | grep \$val | sed 's/:.*//;q') /mnt
arg subroot "Change root to directory"
mount.posixovl -F /mnt/\$val -- -oallow_other -odefault_permissions -osuid
mount --bind /mnt /mnt/\$val/mnt/dos
mount -o size=0 -t tmpfs tmpfs /mnt/\$val/mnt/dos/\$val
LDSO=\$(ls /mnt/\$val/lib/ld-* | sed q)
export LD_LIBRARY_PATH=\$val/lib:\$val/usr/lib:/lib
  [ "$debug" = "true" ] && sh
umount /proc
exec /bin/switch_root /mnt \${LDSO#/mnt/} \$val/usr/sbin/chroot \$val /sbin/init
EOT
	chmod +x /tmp/fs/init
	( cd /tmp/fs ; find * | cpio -o -H newc ) | lzma e $1 -si 2> /dev/null
	rm -rf /tmp/fs /tmp/wait
}

is_loram()
{
	[ -s /lib/squashfs.ko* ]
}

ls_r()
{
	ls -r $@ 2> /dev/null || ls $@
}

doinstall()
{
	mkdir -p /mnt/slitaz/boot /mnt/slitaz/mnt/dos
	if ! mount.posixovl -F /mnt/slitaz -- \
		-oallow_other -odefault_permissions -osuid; then
		echo "Can't install SliTaz. Abort."
		sleep 5
		return 1
	fi
	dowait "Install root filesystem in /slitaz.."
	if [ "$1" ]; then
		if [ -d /media/cdrom/fs ]; then
			( cd /mnt/slitaz/fs; find | cpio -o -H newc ) | gzip -9
		else
			ls_r /media/cdrom/boot/rootfs* | xargs cat
		fi > /mnt/slitaz/boot/rootfs.gz
		tazusbinitfs /mnt/slitaz/boot/rootfs.gz
		initrd=rootfs.gz
		extraargs="/home=$(getuuid)/slitaz rdinit=/init1"
	else
		if [ -d /media/cdrom/fs ]; then
			cp -a /media/cdrom/fs/. /mnt/slitaz
		elif is_loram ; then
			for i in /media/cdrom/boot/rootfs?*.* ; do
				[ -s $(basename $i) ] && continue
				cpio -i $i
			done
			for i in $(ls_r /media/cdrom/boot/rootfs*); do
				mount -o loop,ro $i /sqfs/mnt
				cp -a /sqfs/mnt/. /mnt/slitaz
				umount -d /sqfs/mnt
			done
		else
			for i in $(ls_r /media/cdrom/boot/rootfs*); do
				uncpio $i /mnt/slitaz
			done
		fi
		cp -a /etc/locale.conf /tmp/slitaz/etc 2> /dev/null
		cp -a /etc/keymap.conf /tmp/slitaz/etc 2> /dev/null
		mkinitrd /mnt/slitaz/boot/initrd
		initrd=initrd
		extraargs="mount=$(getuuid) subroot=slitaz"
	fi
	echo -en "\nInstall boot files..."
	for i in /media/cdrom/boot/bzImage /media/cdrom/boot/*pxe* \
		/media/cdrom/boot/isolinux/he* /media/cdrom/boot/isolinux/opt* \
		/media/cdrom/README /media/cdrom/boot/memtest* ; do
		[ -s $i ] && cp $i /mnt/slitaz/boot
	done
	for i in /mnt/slitaz/boot/memtest /mnt/slitaz/boot/*pxe* ; do
		[ $(get 0 $i 2> /dev/null || echo 0) -eq 23117 ] &&
		mv $i $i.exe
	done
	gettazboot /mnt/slitaz/boot/tazboot.exe
	unix2dos > /mnt/slitaz/boot/tazboot.cmd <<EOT
kernel=/slitaz/boot/bzimage
initrd=/slitaz/boot/$initrd
rw root=/dev/null $extraargs autologin
EOT
	unix2dos /mnt/slitaz/boot/he* /mnt/slitaz/boot/opt* \
		/mnt/slitaz/boot/README
	[ -d /mnt/slitaz/usr/sbin -a ! -x /mnt/slitaz/usr/sbin/mount.posixovl ] &&
	cp $(which mount.posixovl) /mnt/slitaz/usr/sbin
	rm -f /tmp/wait
false &&
	[ -s /mnt/boot.ini ] && ! grep -qs tazboot /mnt/boot.ini &&
	echo "Update boot.ini ..." && unix2dos >> /mnt/boot.ini <<EOT
C:\\slitaz\\boot\\tazboot.exe="SliTaz"
EOT
false &&
	grep -qis menuitem /mnt/config.sys && ! grep -qi tazboot /mnt/config.sys &&
	echo "Update config.sys ..." &&
	sed -i 's/menudefault/menuitem SLITAZ, SliTaz\r\n&/' /mnt/config.sys &&
	unix2dos >> /mnt/config.sys <<EOT
[SLITAZ]
install=\\slitaz\\boot\\tazboot.exe
EOT
	return 0
}

install()
{
	$DIALOG --clear \
		--title " SliTaz UMSDOS way installation " \
		--yes-label "Install" --yesno \
"\nSliTaz will be installed in the subdirectory \\slitaz of the current
DOS/Windows partition. You will see your files from /mnt/dos.\n\n
You can start SliTaz with \\slitaz\\boot\\tazboot.exe\n\n
To uninstall SliTaz, you have only to remove this directory.
The file \\boot.ini or \\config.sys may be modified too.\n\n
SliTaz may run slowly on 'UMSDOS way' installation due to the 
posixovl filesystem. The 'TAZUSB way' installation runs faster.\n\n
To do a traditional installation with disk partitioning,
start SliTaz Live with 'SliTaz RAM boot' menu.\n
" 19 70
	[ $? -eq 0 ] || return
	doinstall || return
	[ -x /mnt/slitaz/sbin/init ] || return
	umount -d /media/cdrom
	umount_proc
	exec chroot /mnt/slitaz /sbin/init
}

installtaz()
{
	$DIALOG --clear \
		--title " SliTaz TAZUSB way installation " \
		--yes-label "Install" --yesno \
"\nSliTaz will be installed in the subdirectory \\slitaz of the current
DOS/Windows partition. You will see your files from /mnt/dos.\n\n
You can start SliTaz with \\slitaz\\boot\\tazboot.exe\n\n
To uninstall SliTaz, you have only to remove this directory.
The file \\boot.ini or \\config.sys may be modified too.\n\n
The filesystem is loaded entirely into memory upon boot to
increase responsiveness. Only /home lands on hard disk.\n\n
To do a traditional installation with disk partitioning,
start SliTaz Live with 'SliTaz RAM boot' menu.\n
" 19 70
	[ $? -eq 0 ] || return
	doinstall tazusblike || return
	dotwait 
	if [ -d /media/cdrom/fs ]; then
		cp -a /media/cdrom/fs/. /
	else
		for i in $(ls_r /media/cdrom/boot/rootfs*); do
			uncpio $i
		done
	fi
	cp /tmp/fs/etc/* /etc
	echo "/home=$(getuuid)/slitaz" > /cmdline
	rm -f /tmp/wait
	[ -x /init1 ] || return
	umount -d /media/cdrom
	umount /mnt/slitaz
	rm -f /dev/cdrom
	umount /mnt
	mkdir /mnt/dos
	umount_proc
	exec /init1
}

tazboot()
{
	$DIALOG --clear \
		--title " SliTaz bootloader for DOS " \
		--yes-label "Install" --yesno \
"\nThe file TAZBOOT.EXE will be created in the top directory. It supports
any linux kernel, multiple initramfs, a kernel command line and
an ISO image file loopback (retrieves files from an ISO file).\n\n
Usage: tazboot.exe [[@commands]|[kernel=<bzimage>] 
[initrd=<rootfs>[,<rootfs2>...]] [iso=<isofile>] cmdline args ...]\n\n
Defaults: tazboot @tazboot.cmd or tazboot kernel=bzImage auto\n\n\
Examples for tazboot.cmd:\n\n\
  iso=\\isos\\slitaz-4.0.iso\n\
  kernel=boot/bzImage\n\
  initrd=boot/rootfs4.gz,boot/rootfs3.gz,boot/rootfs2.gz,boot/rootfs1.gz\n\
  rw root=/dev/null autologin\n\n\
  kernel=\\slitaz\\vmlinuz root=/dev/sda5 ro\n\n
Unlike GRUB4DOS, it doesn't require unfragmented ISO image files.\n
" 24 78
	[ $? -eq 0 ] || return
	gettazboot /mnt/tazboot.exe
}

md5()
{
	dotwait "Checking files"
	( cd /media/cdrom ; md5sum -c md5sum* ) > /tmp/data
	rm -f /tmp/wait
	$DIALOG --clear \
		--title " Checked files " \
		--textbox /tmp/data 24 78
	rm -f /tmp/data
}

readme()
{
	$DIALOG --clear \
		--title " Readme " \
		--textbox /media/cdrom/README 24 78
}

bootlog()
{
	$DIALOG --clear \
		--title " Linux boot messages " \
		--textbox /tmp/dmesg 24 78
}

bzimage()
{
	$DIALOG --clear \
		--title " Create linux.exe ? " \
		--yes-label "Install" --yesno \
"\nLinux.exe launches the linux kernel under DOS (in real mode only).
The cmdline arguments are supported except initrd=, vga= (you can try 'rdev -v')
and mem= (partially).\n\nExample:\nC:\\> linux.exe root=/dev/hda2 ro panic=60\n
" 12 70
	[ $? -eq 0 ] || return
	cp /media/cdrom/boot/bzImage /mnt/linux.exe
}

memtest()
{
	$DIALOG --clear \
		--title " Create memtest.exe ? " \
		--yes-label "Install" --yesno \
"\nMemtest86 is a thorough, stand alone memory test for x86 architecture
computers. BIOS based memory tests are a quick, cursory check and often
miss many of the failures that are detected by Memtest86.\n
" 12 70
	[ $? -eq 0 ] || return
	cp /media/cdrom/boot/memtest /mnt/memtest.exe
}

mkfloppy()
{
	dotwait "Create a $(basename $1) boot floppy"
	ddq if=$1 of=/dev/fd0
	[ $(($(get 0 $1) - 0x5A4D)) -eq 0 ] || return
	J=$(($(get 3 $1 1) + 0x02))
	R=$((1 + $(get 497 $1 1) + 1 + ($(get 500 $1)-1)/32))
	[ $R -lt 2500 ] || return
	[ $((($(get 500 $1)-1) & 31)) -lt 30 ] &&
	ddq if=$file bs=32 count=1 seek=$(($R*16 - 1)) of=/dev/fd0
	G="18 0 2 0 0 0 0 0"
	[ $J -gt 25 ] || G=""
	F=0
	for i in 1 2 3; do
		F=$((((2880-$R-$F-$F)*3+1023)/1024))
	done
	bytes2bin 0xEB $J 0x90 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 \
		0 2 2 $(($R%256)) $(($R/256)) 2 64 0 64 11 0xF0 $F 0 \
		$G | ddq bs=1 of=/dev/fd0
	ddq if=/dev/zero bs=512 count=$((4+$F+$F)) seek=$R of=/dev/fd0
	for i in $R $(($R+$F)) ; do
		bytes2bin 0xF0 0xFF 0xFF | ddq bs=512 seek=$i of=/dev/fd0
	done
	echo -n $(basename $1) | ddq bs=1 seek=3 count=8 of=/dev/fd0
	rm -f /tmp/wait
}

fdmemtest()
{
	$DIALOG --clear \
		--title " Create a Memtest86 boot floppy " \
		--yes-label "Create floppy" --yesno \
"\nMemtest86 is a thorough, stand alone memory test for x86 architecture
computers. BIOS based memory tests are a quick, cursory check and often
miss many of the failures that are detected by Memtest86.\n\n
Please insert a blank disk in floppy drive.\n
" 12 70
	[ $? -eq 0 ] && mkfloppy /media/cdrom/boot/memtest
}

pxe()
{
	pxe=$(ls /media/cdrom/boot/?pxe)
	$DIALOG --clear \
		--title " Create $(basename $pxe).exe ? " \
		--yes-label "Install" --yesno \
"\nBoot your operating system from the internet and enjoy a full system
working entirely in RAM with speed and stability in mind. The Linux Kernel
and the complete SliTaz compressed root filesystem will be loaded into RAM
from the Web using PXE and HTTP protocols.\n
" 12 70
	[ $? -eq 0 ] || return
	cp $pxe /mnt/$(basename $pxe).exe
}

fdpxe()
{
	$DIALOG --clear \
		--title " Create a SliTaz Web boot floppy " \
		--yes-label "Create floppy" --yesno \
"\nBoot your operating system from the internet and enjoy a full system
working entirely in RAM with speed and stability in mind. The Linux Kernel
and the complete SliTaz compressed root filesystem will be loaded into RAM
from the Web using PXE and HTTP protocols.\n\n
Please insert a blank disk in floppy drive.\n
" 12 70
	[ $? -eq 0 ] && mkfloppy /media/cdrom/boot/?pxe
}

gotposixovl()
{
	mount.posixovl 2>&1 | grep -qi usage && 
	echo -en "\"$1\"	\"$2\""
}

xfile()
{
	[ "$(which $1)" ] && echo -en "\"$2\"	\"$3\""
}

cdfile()
{
	for i in ${1//,/ }; do
		[ -s /media/cdrom/$i ] && echo -en "\"$2\"	\"$3\"" && break
	done
}

cdfilex()
{
	[ "$(which kexec)" ] && cdfile "$@"
}

cdexe()
{
	[ $(get 0 /media/cdrom/$1 2> /dev/null || echo 0) -eq 23117 ] &&
	echo -en "\"$2\"	\"$3\""
}

fddata()
{
	[ $(get 28 /mnt/$ISO 1 2> /dev/null || echo 0) -ne 0 ] &&
	echo -en "\"$1\"	\"$2\""
}

fdbootstrap()
{
	sz=$((512 * $(echo $(get 28 /mnt/$ISO 1))))
	$DIALOG --clear \
		--title " Create a floppy bootstrap " \
		--yes-label "Continue" --yesno \
"\nThe floppy will install a driver to access the ISO file
on your hard disk and will emulate a CD-ROM during the boot process.\n\n 
Please insert a floppy in drive now.\n 
" 10 70
	[ $? -eq 0 ] || return
	ddq if=/mnt/$ISO of=/tmp/bootiso bs=1 count=512 \
		skip=$(( $(get 66 /mnt/$ISO) - $sz ))
	echo "$ISO" | ddq of=/tmp/bootiso bs=512 seek=1 count=1
	ddq if=/mnt/$ISO of=/tmp/bootiso bs=1 count=$sz seek=2 \
		skip=$(( $(get 66 /mnt/$ISO) - $sz + 512 ))
	mkfloppy /tmp/bootiso
	rm -f /tmp/bootiso
}

usbdev()
{
	dotwait "Wait 5 seconds for USB devices"
	sleep 5
	rm -f /tmp/wait
	DEV="$(grep -l 1 /sys/block/*/removable | \
		sed 's|/sys/block/\(.*\)/removable|\1|')"
	[ "$DEV" ] || return
	exec 3>&1
	device=`$DIALOG  --clear \
	--title " Select your USB key " \
	--menu "\nPlease select the USB key according to its known size.\n\n" \
	14 70 4 \
	$(for i in $DEV ; do
		echo "/dev/$i $(( $(cat /sys/block/$i/size) / 1024 ))MB"	 
	done) \
	2>&1 1>&3`
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ]
}

usbbootkey()
{
	$DIALOG --clear \
		--title " Create a USB boot key " \
		--yes-label "Continue" --yesno \
"\nThe USB key will be used like a CD-ROM. You will not be able to write
any data on the boot partition.\n\n
An extra FAT32 partition will be created with the remaining free space.\n\n
You should choose 'USB key read/write installation' to be
able to save the package updates or your own configuration and data files.\n\n
Please plug your USB stick in now.\n 
" 16 70
	[ $? -eq 0 ] || return
	usbdev || return
	
	# perform dd in progess bar
	max=$(($(stat -c %s /mnt/$ISO)/1024/1024))
	i=0; ddq if=/mnt/$ISO bs=1024k | ( 
	while ddq bs=1024k count=1 ; do 
		i=$(($i + 1))
		[ $i -gt $max ] && break
		echo $((($i*100)/$max)) | dialog --gauge \
			" The ISO image transfer can be long. Please wait..." \
			6 70 0 > /dev/tty0 2>&1
	done ) > $device

	# partition + fat32 format for the remining space
	od -j 466 -N 12 -t u2 -An $device | { read dx cx ol oh ll lh 
	if [ $dx -eq $((0x3F17)) ]; then
		cx=$(($cx & 0xFF00))
		ofs=$(($ll+($lh<<16)))
		n=$(($(cat /sys/block/${device#/dev/}/size)-$ofs))
		m=$(($cx+($n/8)))
		[ $m -gt $((0x3FF00)) ] && m=$((0x3FF00))
		m=$((($m & 0xFF00)+(($m>>16)<<6)))
		words2bin 0 $((0x101+$cx)) 0x3F0B $((32+$m)) \
			$ll $lh $(($n & 0xFFFF)) $(($n >> 16)) | \
			ddq bs=1 seek=446 of=$device
		if [ "$(which mkdosfs 2> /dev/null)" ]; then
			losetup -o $((512*$ofs)) /dev/loop0 $device
			mkdosfs -n "SLITAZ BOOT" /dev/loop0
			words2bin $(($ofs & 0xFFFF)) $(($ofs >> 16)) | \
				ddq bs=1 seek=28 of=/dev/loop0
			losetup -d /dev/loop0
		fi
 	fi ; }
}

usbkey()
{
	$DIALOG --clear \
		--title " Create a SliTaz USB key " \
		--yes-label "Continue" --yesno \
"\nUnlike a hard drive install, the filesystem is kept in a compressed
rootfs.gz. The filesystem is loaded entirely into memory upon boot.
This should increase responsiveness, protect the filesystem against
accidental corruption and reduce read/writes to the USB drive.
Once setup, the tazusb utility can rewrite the root filesystem
with any changes you have made since booting up, 
giving the effective benefits of a hard drive install.\n\n
/home is mounted on boot using the UUID of your particular flash drive.
Unlike a device name, the UUID has the benefit of never changing from machine
to machine.\n\n
Please plug your USB stick in now.\n 
" 19 70
	[ $? -eq 0 ] || return
	usbdev || return
	exec 3>&1
	format=`$DIALOG  --clear \
	--title " Select the filesystem " \
	--radiolist "\nPlease select the filesystem type to create.\n\n\
The filesystem creation will erase all the data \
in the USB key." 14 70 4 \
		"none"	"Do not erase the USB key" on \
		"ext3"	"Ext3 journaling filesystem" off \
		"ext2"	"Ext2 filesystem" off \
		"fat32"	"Windows FAT32 filesystem" off \
	2>&1 1>&3`
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ] || return
	[ "$format" != "none" ] && tazusb format $device "SliTaz" $format
	tazusb gen-iso2usb /mnt/$ISO $device
}

mount_loram()
{
	is_loram || return
	insmod /lib/squashfs.ko* 2> /dev/null
	if [ -d /media/cdrom/fs ]; then
		ln -s /media/cdrom/fs /sqfs
	else
		mkdir /sqfs
		mount -o loop,ro -t squashfs /rootfs*.gz /sqfs
	fi
	ln -s /sqfs/lib/* lib
	ln -s /sqfs/usr /sqfs/var /
	for i in dmesg basename tr od reboot poweroff getty sync ; do
		ln -s /sqfs/bin/busybox /bin/$i
	done
}

umount_loram()
{
	is_loram || return
	rm  /var /usr
	umount -d /sqfs
	rmdir /sqfs
}

text()
{
	umount_loram
	umount -d /media/cdrom
	rm -f /dev/cdrom
	umount /mnt
	umount_proc
	exec /init
}

live()
{
	n=0
	dotwait "Extract filesystem..."
	for i in $(ls_r /media/cdrom/boot/rootfs*); do
		[ $((n++)) -eq 0 ] || uncpio $i
	done
	rm -f /tmp/wait
	text
}

dosync()
{
	sync
	[ ! -L /sqfs ] && umount -d /media/cdrom && umount /mnt
}

restart()
{
	dosync
	reboot -f
}

stop()
{
	dosync
	poweroff -f
}

runmemtest()
{
	kexec -l /media/cdrom/boot/memtest
	dosync
	kexec -e
}

runpxe()
{
	kexec -l /media/cdrom/boot/?pxe
	dosync
	kexec -e
}

shell()
{
	getty -n -l /bin/ash 38400 tty1 || sh
}

BIN=bin/mount.posixovl
[ -x /usr/s$BIN ] || mv /bin/mount.posixovl.iso2exe \
/usr/s$BIN 2> /dev/null || mv /bin/mount.posixovl.iso2exe /$BIN
mount_proc
ISO="$(getarg iso | sed 's/.://;s|\\|/|g')"
getiso
mount_loram
case "${ISO##*/}$(getarg mode)" in
*install*|*INSTALL*)	install ;;
*live*|*LIVE*)		live ;;
*text*|*TEXT*)		text ;;
esac
which $DIALOG 2> /dev/null || live
dmesg > /tmp/dmesg

while true; do
	keymap="$(cat /etc/keymap.conf 2> /dev/null)"
	locale="$(sed '/^LANG=/!d;s/.*=//' /etc/locale.conf 2> /dev/null)"
	cat > /tmp/dialog <<EOT
$DIALOG  --clear \
	--title " Welcome to SliTaz " \
	--menu "" 23 70 17 \
$(xfile tazkeymap	"tazkeymap"	"Select keyboard ($keymap)") \
$(xfile tazlocale	"tazlocale"	"Select locale ($locale)") \
$(cdfile boot/bzImage	"live"		"SliTaz RAM boot") \
			"text"		"SliTaz RAM boot (text mode only)" \
$(cdfile README		"readme"	"Show the README file") \
$(cdfile md5sum*	"md5"		"Check ISO files") \
$(gotposixovl		"install"	"Hard disk installation (UMSDOS way)") \
$(gotposixovl		"installtaz"	"Hard disk installation (TAZUSB way)") \
$(xfile tazusb		"usbkey"	"USB key read/write installation") \
$(cdfile boot/bzImage	"usbbootkey"	"USB boot key (read only)") \
$(fddata		"fdbootstrap"	"Create a floppy bootstrap") \
$(cdfile boot/bzImage	"tazboot"	"Get tazboot.exe Linux loader") \
$(cdexe boot/bzImage	"bzimage"	"Get linux DOS/EXE file") \
$(cdexe boot/memtest	"memtest"	"Get Memtest86 DOS/EXE file") \
$(cdfile boot/memtest,boot/isolinux/memtest \
			"fdmemtest"	"Create a Memtest86 boot floppy") \
$(cdfilex boot/memtest,boot/isolinux/memtest \
			"runmemtest"	"Start Memtest86") \
$(cdexe boot/?pxe	"pxe"		"Get SliTaz Web boot DOS/EXE utility") \
$(cdfile boot/?pxe	"fdpxe"		"Create a SliTaz Web boot floppy") \
$(cdfilex boot/?pxe	"runpxe"	"Start the SliTaz Web boot utility") \
$(xfile reboot		"restart"	"Restart the computer") \
$(xfile poweroff	"stop"		"Power off") \
			"bootlog"	"Linux boot messages" \
			"shell"		"Shell prompt" \

EOT
	exec 3>&1
	value=$(sh /tmp/dialog 2>&1 1>&3)
	retval=$?
	exec 3>&-
	[ $retval -eq 0 ] || continue
	$value
done
