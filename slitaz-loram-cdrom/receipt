# SliTaz package receipt.

PACKAGE="slitaz-loram-cdrom"
VERSION="1.5"
CATEGORY="misc"
SHORT_DESC="Rules to build low ram system using cdrom."
MAINTAINER="pascal.bellard@slitaz.org"
WEB_SITE="http://www.slitaz.org/"
DEPENDS="slitaz-boot-scripts tazlito"

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
    mkdir -p $fs/etc/tazlito
    cp stuff/loram.* $fs/etc/tazlito
}

set_patch()
{
    local tag
    local line
    local len
    local i
    tag="Handle kernel cmdline parameter config"
    i=$(grep -n "$tag" $1/etc/init.d/rcS | cut -d: -f1)
    i=$(($i-1))
    len=87
    tag=$(grep "$tag" $1/etc/init.d/rcS)
    if [ "$2" = "-R" ]; then
    	line="-$(($i-$len+2)),$len +$(($i-$len+2)),2"
	i="-"
    else
        grep -q 'from slitaz-loram-cdrom package' $1/etc/init.d/rcS && return
    	line="-$i,2 +$i,$len"
	i="+"
    fi
    busybox patch -p0 <<EOF
--- $1/etc/init.d/rcS
+++ $1/etc/init.d/rcS
@@ $line @@
 
$i# Try to release the cdrom (from slitaz-loram-cdrom package)
$i release_cdrom()
$i {
$i	FREEMEM=\$(busybox free | busybox awk '{ n = \$NF } END { print n }')	
$i	if [ \$FREEMEM -gt \$(busybox du -s \$FS | busybox awk '{ print \$1+40000 }') ]; then
$i		if grep -q " extract-loram" /proc/cmdline &&
$i		    [ -d \$FS -o \$FREEMEM -gt \$(busybox du -s \$FS | \\
$i			busybox awk '{ print (\$1*4)+40000 }') ]; then
$i			echo -n "Extracting loram..."
$i			. /etc/tazlito/loram.extract /cdrom
$i			if status; then
$i				umount /cdrom
$i				rmdir /cdrom
$i				yes y | tazpkg remove slitaz-loram-cdrom > /dev/null
$i				return 0
$i			fi
$i		fi
$i		cp -a \$FS /.usr.fs
$i		status
$i		echo -n "Releasing CD-ROM..."
$i		umount /cdrom
$i		FS=/.usr.fs
$i		if [ -d \$FS ]; then
$i			rm -f /\$usr
$i			mv \$FS /usr
$i		fi
$i	fi
$i	return 1
$i }
$i
$i# Mount /usr (from slitaz-loram-cdrom package)
$i if [ -d /cdrom ]; then
$i 	DEVICE=/dev/cdrom
$i 	DIR=
$i	if grep -q " loram=" /proc/cmdline; then
$i		DIR=\`cat /proc/cmdline | sed 's/.* loram=\([^ ]*\).*/\1/'\`
$i		DEVICE=\${DIR%,*}
$i		DIR=/\${DIR#*,}
$i	fi
$i	if ! /bin/mount -r \$DEVICE /cdrom; then
$i		if echo \$DEVICE | grep -Eq "/dev/sd|UUID=|LABEL="; then
$i			USBDELAY=\`cat /sys/module/usb_storage/parameters/delay_use\`
$i			USBDELAY=\$((1+\$USBDELAY))
$i			echo "\$DEVICE is potentially a USB device: sleep for \$USBDELAY seconds"
$i			sleep \$USBDELAY
$i		fi
$i		if ! /bin/mount -r \$DEVICE /cdrom; then
$i			DEVICE=""
$i		fi
$i	fi
$i	while [ -n "\$DEVICE" ]; do
$i		if [ -d /.usr.rw ]; then
$i			echo -n "Mounting /usr read-write... "
$i			usr=.usr.ro
$i		else
$i			echo -n "Mounting /usr read-only... "
$i			usr=usr
$i		fi
$i		FS=/cdrom\$DIR/usr.cromfs
$i		if [ -f \$FS ]; then
$i			release_cdrom && break
$i			/bin/cromfs-driver \$FS /\$usr -o ro,dev,suid,allow_other
$i		elif [ -f /cdrom\$DIR/usr.sqfs ]; then
$i			FS=/cdrom\$DIR/usr.sqfs
$i			release_cdrom && break
$i			mount -o loop,ro -t squashfs \$FS /\$usr
$i		elif [ -L /\$usr ]; then
$i			FS=/cdrom\$DIR/usr
$i			release_cdrom && break
$i		else
$i			umount /cdrom
$i			false
$i		fi
$i		status 
$i		if [ -d /.usr.rw ]; then
$i			if [ -x /bin/funionfs ]; then
$i				/bin/funionfs -o dirs=/.usr.ro=RO:/.usr.rw -o allow_other -o suid,dev NONE /usr
$i			else
$i				/bin/mount -t aufs -o br:/.usr.rw:/.usr.ro none /usr
$i			fi
$i		fi
$i		break
$i	done
$i fi
$i
 $tag
EOF
    tag="/var/log/dmesg.log"
    i=$(grep -n "$tag" $1/etc/init.d/rcS | cut -d: -f1)
    i=$(($i-1))
    len=9
    tag=$(grep "$tag" $1/etc/init.d/rcS)
    if [ "$2" = "-R" ]; then
    	line="-$(($i-$len+2)),$len +$(($i-$len+2)),2"
	i="-"
    else
    	line="-$i,2 +$i,$len"
	i="+"
    fi
    busybox patch -p0 <<EOF
--- $1/etc/init.d/rcS
+++ $1/etc/init.d/rcS
@@ $line @@
 
$i# Build ramdisk if root=/dev/cdrom (from slitaz-loram-cdrom package)
$i if [ -L /root ]; then
$i	mount -t tmpfs ramdisk /tmp
$i	mkdir -p /tmp/log/lighttpd /tmp/run /tmp/lock
$i	chown www.www /tmp/log/lighttpd
$i fi
$i
 $tag
EOF
    chmod 0755 $1/etc/init.d/rcS
}

# Pre and post install commands for Tazpkg.
pre_install()
{
    local i
    for i in $(cd /var/lib/tazpkg/installed ; ls -d slitaz-loram* 2> /dev/null); do
        [ "$i" = "$PACKAGE" ] && continue
        yes y | tazpkg remove $i
        . /etc/tazlito/tazlito.conf
	rm -f $PACKAGES_REPOSITORY/slitaz-boot-scripts-*.tazpkg 2> /dev/null
    done
}

post_install()
{
    set_patch "$1"
    if [ ! -x $1/bin/funionfs -a ! -d $1/var/lib/tazpkg/installed/aufs ]; then
        cat <<EOF
----
You will build a live CD with /usr mounted read-only.
You can install aufs or funionfs to have read-write access into /usr with:

# tazpkg get-install aufs
or
# tazpkg get-install funionfs

EOF
    fi
}

# Pre remove commands for Tazpkg.
pre_remove()
{
    set_patch '' -R 
}
