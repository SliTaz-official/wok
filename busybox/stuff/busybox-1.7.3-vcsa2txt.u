--- busybox-1.7.3/include/applets.h	2008-03-01 11:20:49.000000000 +0100
+++ busybox-1.7.3/include/applets.h	2008-03-01 11:24:45.000000000 +0100
@@ -357,6 +357,7 @@ USE_USLEEP(APPLET_NOFORK(usleep, usleep,
 USE_UUDECODE(APPLET(uudecode, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_UUENCODE(APPLET(uuencode, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_VCONFIG(APPLET(vconfig, _BB_DIR_SBIN, _BB_SUID_NEVER))
+USE_VCSA2TXT(APPLET(vcsa2txt, _BB_DIR_USR_BIN, _BB_SUID_NEVER))
 USE_VI(APPLET(vi, _BB_DIR_BIN, _BB_SUID_NEVER))
 USE_VLOCK(APPLET(vlock, _BB_DIR_USR_BIN, _BB_SUID_ALWAYS))
 USE_WATCH(APPLET(watch, _BB_DIR_BIN, _BB_SUID_NEVER))

--- busybox-1.7.3/include/usage.h	2008-03-01 11:22:06.000000000 +0100
+++ busybox-1.7.3/include/usage.h	2008-03-01 11:32:48.000000000 +0100
@@ -3835,6 +3835,13 @@ USE_FEATURE_RUN_PARTS_FANCY("\n	-l	Print
        "	set_ingress_map	[vlan-name] [skb_priority] [vlan_qos]\n" \
        "	set_name_type	[name-type]"
 
+#define vcsa2txt_trivial_usage \
+       "stdin"
+#define vcsa2txt_full_usage \
+       "Filter /dev/vcsa* to ansi escape sequences"
+#define vcsa2txt_example_usage \
+       "# vcsa2txt < /dev/vcsa1\n"
+
 #define vi_trivial_usage \
        "[OPTION] [FILE]..."
 #define vi_full_usage \

--- busybox-1.7.3/miscutils/Config.in	2008-03-01 11:21:44.000000000 +0100
+++ busybox-1.7.3/miscutils/Config.in	2008-03-01 11:32:32.000000000 +0100
@@ -380,6 +380,12 @@ config TTYSIZE
 	  only height, or both, in any order. It also does not complain on error,
 	  but returns default 80x24. Usage in shell scripts: width=`ttysize w`.
 
+config VCSA2TXT
+	bool "vcsa2txt"
+	default n
+	help
+	  Filter /dev/vcsa* output to ansi escape sequences.
+
 config WATCHDOG
 	bool "watchdog"
 	default n

--- busybox-1.7.3/util-linux/Kbuild	2008-03-01 11:21:57.000000000 +0100
+++ busybox-1.7.3/util-linux/Kbuild	2008-03-01 11:32:37.000000000 +0100
@@ -30,4 +30,5 @@ lib-$(CONFIG_SCRIPT)		+=script.o
 lib-$(CONFIG_SETARCH)		+=setarch.o
 lib-$(CONFIG_SWAPONOFF)		+=swaponoff.o
 lib-$(CONFIG_SWITCH_ROOT)	+=switch_root.o
+lib-$(CONFIG_VCSA2TXT)		+=vcsa2txt.o
 lib-$(CONFIG_UMOUNT)		+=umount.o

--- busybox-1.7.3/util-linux/vcsa2txt.c	1970-01-01 01:00:00.000000000 +0100
+++ busybox-1.7.3/util-linux/vcsa2txt.c	2008-03-01 11:36:13.000000000 +0100
@@ -0,0 +1,48 @@
+#include "libbb.h"
+
+static void writechar(int c) { (void)write(1,&c,1); }
+
+int vcsa2txt_main(int argc, char *argv[]);
+int vcsa2txt_main(int argc, char *argv[])
+{
+  struct {unsigned char l, c, x, y;} scrn; // man 4 console_codes   BLGCRMOW
+  static unsigned char last, ch[2], end[5] = "\e[0m\n", color[8] = "04261537";
+  int sp, lf, x;
+  if (read(0, &scrn, 4) < 0) return 1;
+  for (lf = 0; scrn.l; lf++, scrn.l--) for (sp = x = 0; ++x <= scrn.c;) {
+    if (read(0, &ch[0], 2) < 0) return 1;
+    if (argc > 1) ch[1] = 0;
+    sp++; if (last == ch[1] && ch[0] == ' ') continue;
+    for (lf++; --lf;) writechar('\n'); while (--sp) writechar(' ');
+#define PACKED
+#ifdef PACKED
+    if (last ^= ch[1]) {
+      char esc[16],*s;
+      struct offsets { char mask, type, shr; } *p;
+      static struct offsets offset[3] = {{8,0,1},{0x70,'4',4},{7,'3',0}};
+      static char init = 0x7F;
+      s = esc+2; *(short *)esc = '\e'+256*'[';
+      p = offset; do if ((init|last) & p->mask) {
+	int c = (ch[1] & p->mask) >> p->shr;
+	if ((*s = p->type) != 0) s++;
+	else if (c == 0) { c = 2; *s++ = '2'; /* normal */}
+	*s++ = color[c]; *s++ = ';'; 
+      } while (p++->shr); s[-1] = 'm';
+      init = 0;
+      (void)write(1,esc,s-esc);
+    }
+    last = ch[1];
+#else
+    if (last != ch[1]) {
+      static char esc[10] = "\e[0;47;37m";
+      esc[2] = ((last = ch[1]) & 8) ? '1' /* bold */ : '0' /* defaults */;
+      esc[sizeof(esc)-5] = color[(ch[1] >> 4) & 7];
+      esc[sizeof(esc)-2] = color[ch[1] & 7];
+      (void)write(1,esc,sizeof(esc));
+    }
+#endif
+    writechar(ch[0]);
+  }
+  (void)write(1,end,sizeof(end));
+  return 0;
+}
