--- linux-libre-3.18.129-gnu/init/initramfs.c
+++ linux-libre-3.18.129-gnu/init/initramfs.c
@@ -409,6 +409,52 @@
 	[Reset]		= do_reset,
 };
 
+#include <linux/initrd.h>
+#define INITRD_PAGE ((PAGE_SIZE > 64*1024) ? PAGE_SIZE : 64*1024)
+#define INITRD_DOT  (1024*1024)
+
+static void free_rootfs_mem(unsigned long start, unsigned long end)
+{
+	free_init_pages(NULL, start, end);
+}
+
+static void _free_initrd(unsigned long initrd_start, unsigned long initrd_end, 
+			 void (*free_initrd_mem)(unsigned long, unsigned long));
+
+static struct {
+	int offset, last, inptr, freed;
+	char *max;
+} fill;
+
+static void release_inbuf(unsigned n)
+{
+	if (n >= INITRD_PAGE) {
+		unsigned rem = n % INITRD_PAGE;
+		unsigned end = initrd_start + n - rem;
+		_free_initrd(initrd_start, end, free_rootfs_mem);
+		fill.freed += n - rem;
+		if (fill.freed >= INITRD_DOT) {
+			fill.freed -= INITRD_DOT;
+			printk(".");
+		}
+		initrd_start = end;
+		fill.offset = rem;
+	}
+}
+
+static int fill_buffer(void *buffer, unsigned size)
+{
+	int max =  fill.max - (char *) initrd_start - fill.offset;
+	if (max > size) max = size;
+	if (max > INITRD_PAGE) max = INITRD_PAGE;
+	memcpy(buffer, (void *)(initrd_start + fill.offset), max);
+	release_inbuf(fill.offset);
+	fill.offset += max;
+	fill.inptr += fill.last;
+	fill.last = max;
+	return max;
+}
+
 static long __init write_buffer(char *buf, unsigned long len)
 {
 	byte_count = len;
@@ -452,6 +498,7 @@
 	decompress_fn decompress;
 	const char *compress_name;
 	static __initdata char msg_buf[64];
+	int early_free_initrd = (buf == (char *) initrd_start);
 
 	header_buf = kmalloc(110, GFP_KERNEL);
 	symlink_buf = kmalloc(PATH_MAX + N_ALIGN(PATH_MAX) + 1, GFP_KERNEL);
@@ -465,11 +512,16 @@
 	message = NULL;
 	while (!message && len) {
 		loff_t saved_offset = this_header;
+		fill.offset = buf - (char *) initrd_start;
+		fill.max = buf + len;
+		fill.inptr = fill.last = fill.freed = 0;
 		if (*buf == '0' && !(this_header & 3)) {
 			state = Start;
 			written = write_buffer(buf, len);
 			buf += written;
 			len -= written;
+			if (early_free_initrd)
+				release_inbuf(buf - (char *) initrd_start);
 			continue;
 		}
 		if (!*buf) {
@@ -482,7 +534,13 @@
 		decompress = decompress_method(buf, len, &compress_name);
 		pr_debug("Detected %s compressed data\n", compress_name);
 		if (decompress) {
-			int res = decompress(buf, len, NULL, flush_buffer, NULL,
+			int res;
+			if (early_free_initrd) {
+				res = decompress(NULL, 0, fill_buffer,
+					   flush_buffer, NULL, &my_inptr, error);
+				my_inptr += fill.inptr;
+			}
+			else res = decompress(buf, len, NULL, flush_buffer, NULL,
 				   &my_inptr, error);
 			if (res)
 				error("decompressor failed");
@@ -524,7 +582,8 @@
 #include <linux/initrd.h>
 #include <linux/kexec.h>
 
-static void __init free_initrd(void)
+static void _free_initrd(unsigned long initrd_start, unsigned long initrd_end, 
+			 void (*free_initrd_mem)(unsigned long, unsigned long))
 {
 #ifdef CONFIG_KEXEC
 	unsigned long crashk_start = (unsigned long)__va(crashk_res.start);
@@ -552,6 +611,12 @@
 #endif
 		free_initrd_mem(initrd_start, initrd_end);
 skip:
+	;
+}
+
+static void __init free_initrd(void)
+{
+	_free_initrd(initrd_start, initrd_end, free_initrd_mem);
 	initrd_start = 0;
 	initrd_end = 0;
 }
