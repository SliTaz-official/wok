--- compressed_loop.h
+++ compressed_loop.h
@@ -41,6 +41,80 @@
 /* data_index (num_blocks 64bit pointers, network order)...      */
 /* compressed data (gzip block compressed format)...             */
 
+struct cloop_tail
+{
+	u_int32_t table_size;
+	u_int32_t index_size;
+	u_int32_t num_blocks;
+};
+
+struct block_info
+{
+	loff_t offset;		/* 64-bit offsets of compressed block */
+	u_int32_t size;		/* 32-bit compressed block size */
+	u_int32_t optidx;	/* 32-bit index number */
+};
+
+static inline char *build_index(struct block_info *offsets, unsigned long n)
+{
+	u_int32_t *ofs32 = (u_int32_t *) offsets;
+	loff_t    *ofs64 = (loff_t *) offsets;
+	
+	if (ofs32[0] == 0) {
+		if (ofs32[2]) { /* ACCELERATED KNOPPIX V1.0 */
+			while (n--) {
+				offsets[n].offset = __be64_to_cpu(offsets[n].offset);
+				offsets[n].size = ntohl(offsets[n].size);
+			}
+			return (char *) "128BE accelerated knoppix 1.0";
+		}
+		else { /* V2.0 */
+			loff_t last = __be64_to_cpu(ofs64[n]);
+			while (n--) {
+				offsets[n].size = last - 
+					(offsets[n].offset = __be64_to_cpu(ofs64[n])); 
+				last = offsets[n].offset;
+			}
+			return (char *) "64BE v2.0";
+		}
+	}
+	else if (ofs32[1] == 0) { /* V1.0 */
+		loff_t last = __le64_to_cpu(ofs64[n]);
+		while (n--) {
+			offsets[n].size = last - 
+				(offsets[n].offset = __le64_to_cpu(ofs64[n])); 
+			last = offsets[n].offset;
+		}
+		return (char *) "64LE v1.0";
+	}
+	else if (ntohl(ofs32[0]) == (4*n) + 0x8C) { /* V0.68 */
+		loff_t last = ntohl(ofs32[n]);
+		while (n--) {
+			offsets[n].size = last - 
+				(offsets[n].offset = ntohl(ofs32[n])); 
+			last = offsets[n].offset;
+		}
+		return (char *) "32BE v0.68";
+	}
+	else { /* V3.0 */
+		unsigned long i;
+		loff_t j;
+		
+		for (i = n; i-- != 0; )
+			offsets[i].size = ntohl(ofs32[i]); 
+		for (i = 0, j = sizeof(struct cloop_head); i < n; i++) {
+			offsets[i].offset = j;
+			if (offsets[i].size & 0x80000000) {
+				unsigned long k = offsets[i].size & 0x7FFFFFFF;
+				offsets[i].offset = offsets[k].offset;
+				offsets[i].size = offsets[k].size;
+			}
+			else j += offsets[i].size;
+		}
+		return (char *) "32BE v3.0";
+	}
+}
+
 /* Cloop suspend IOCTL */
 #define CLOOP_SUSPEND 0x4C07
 

--- cloopreader.h
+++ cloopreader.h
@@ -33,7 +33,7 @@
     int numblocks;
     ulong blocksize;
 
-    loff_t* toc; /* Data index */
+    struct block_info *toc; /* Data index */
     size_t tocsize;
 
     unsigned char* cblock;  /* Compressed block */

--- cloopreader.c
+++ cloopreader.c
@@ -59,10 +59,32 @@
 
     ALLOC(c->pblock,c->blocksize);
 
-    c->tocsize=sizeof *c->toc * (c->numblocks+1); /* One extra address is position of EOF */
-    ALLOC(c->toc,c->tocsize);
+    if (c->numblocks + 1 == 0) {
+	struct cloop_tail tail;
+	loff_t end = lseek(c->fh,0,SEEK_END); /* lseek(,-n,SEEK_END) buggy ? */
+	void *p;
+	ulong toclen, len; 
 
-    OP(read_all(c->fh,c->toc,c->tocsize));  /* read Data Index */
+	OP(lseek(c->fh, end - sizeof(tail), SEEK_SET)); 
+	OP(read_all(c->fh, &tail, sizeof(tail)));
+	c->numblocks = ntohl(tail.num_blocks);
+	c->tocsize = sizeof(*c->toc) * c->numblocks;
+	len = ntohl(tail.table_size);
+	toclen = (ntohl(tail.index_size) & 255) * c->numblocks;
+	OP(lseek(c->fh, end - sizeof(tail) - len, SEEK_SET));
+        ALLOC(c->toc, sizeof(*c->toc) * c->numblocks);
+        ALLOC(p,len);
+        OP(read_all(c->fh,p,len));  /* read Data Index */
+	if (uncompress((void *)c->toc,&toclen,p,len) != Z_OK)
+		exit(1);
+	free(p);
+    }
+    else {
+	c->tocsize = sizeof(*c->toc) * c->numblocks;
+        ALLOC(c->toc,c->tocsize);
+        OP(read_all(c->fh,c->toc,c->tocsize));  /* read Data Index */
+    }
+    build_index(c->toc, c->numblocks);
     c->cblocksizecur=0;
     c->curblock=-1;
     return 0;
@@ -79,10 +101,10 @@
     if(page>=c->numblocks){errno=EFAULT;return -1;}
     c->curblock=page;
 
-    bprintf("Seeking to 0x%Lx\n",btc(c->toc[page]));
-    OP(lseek(c->fh,btc(c->toc[page]), SEEK_SET)); 
+    bprintf("Seeking to 0x%Lx\n",c->toc[page].offset);
+    OP(lseek(c->fh,c->toc[page].offset, SEEK_SET)); 
 
-    c->cblocksize=btc(c->toc[page+1]) - btc(c->toc[page]);
+    c->cblocksize=c->toc[page].size;
     bprintf("Compressed size=%lu\n",c->cblocksize);
     if(c->cblocksize > c->cblocksizecur){
 	if(c->cblocksizecur)free(c->cblock);

--- extract_compressed_fs.c
+++ extract_compressed_fs.c
@@ -1,19 +1,23 @@
 /* Extracts a filesystem back from a compressed fs file */
+#define _LARGEFILE64_SOURCE
 #include "common_header.h"
+#define CLOOP_PREAMBLE "#!/bin/sh\n" "#V2.0 Format\n" "modprobe cloop file=$0 && mount -r -t iso9660 /dev/cloop $1\n" "exit $?\n"
 
 int main(int argc, char *argv[])
 {
 	int handle;
 	struct cloop_head head;
 	unsigned int i;
+	unsigned long num_blocks, block_size, zblock_maxsize, lastlen = 0;
 	unsigned char *buffer, *clear_buffer;
+	struct block_info *offsets;
 
-	if (argc != 2) {
-		fprintf(stderr, "Need filename\n");
+	if (argc < 2 || argv[1][0] == '-') {
+		fprintf(stderr, "Usage: extract_compressed_fs file [--convert-to-v2] > output\n");
 		exit(1);
 	}
 
-	handle = open(argv[1], O_RDONLY);
+	handle = open(argv[1], O_RDONLY|O_LARGEFILE);
 	if (handle < 0) {
 		perror("Opening compressed file\n");
 		exit(1);
@@ -24,66 +28,100 @@
 		exit(1);
 	}
 
-	buffer = malloc(ntohl(head.block_size) + ntohl(head.block_size)/1000
-			+ 12 + 4);
-	clear_buffer = malloc(ntohl(head.block_size));
-	fprintf(stderr, "%u blocks of size %u. Preamble:\n%s\n", 
-		ntohl(head.num_blocks), ntohl(head.block_size), head.preamble);
+	num_blocks = ntohl(head.num_blocks);
+	block_size = ntohl(head.block_size);
+	zblock_maxsize =  block_size + block_size/1000 + 12 + 4;
+	buffer = malloc(zblock_maxsize);
+	clear_buffer = malloc(block_size);
 
-	for (i = 0; i < ntohl(head.num_blocks); i++) {
-		int currpos;
-		unsigned long destlen = ntohl(head.block_size);
-		loff_t offset[2];
-		unsigned int size;
+	if (num_blocks == (unsigned long) -1) {
+		void *table;
+		struct cloop_tail tail;
+		unsigned long len, table_size;
+		loff_t end = lseek64(handle, 0, SEEK_END);
+		
+		if (lseek64(handle, end - sizeof(tail), SEEK_SET) < 0 ||
+		    read(handle, &tail, sizeof(tail)) != sizeof(tail) ||
+		    lseek64(handle, end - sizeof(tail) - 
+		    	  ntohl(tail.table_size), SEEK_SET) < 0) {
+			perror("Reading tail\n");
+			exit(1);
+		}
+		head.num_blocks = tail.num_blocks;
+		num_blocks = ntohl(head.num_blocks);
+		table_size = ntohl(tail.table_size);
+		table = malloc(table_size);
+		len = i = num_blocks * (ntohl(tail.index_size) & 255);
+		lastlen = ntohl(tail.index_size) / 256;
+		offsets = malloc(num_blocks * sizeof(*offsets));
+		if (!table || !offsets || 
+		    read(handle, table, table_size) != table_size ||
+		    uncompress((void *)offsets, &len, table, table_size) != Z_OK ||
+		    len != i) {
+			perror("Reading index\n");
+			exit(1);
+		}
+		free(table);
+	}
+	else {
+		offsets = malloc(i = num_blocks * sizeof(*offsets));
+		if (!offsets || read(handle, offsets, i) != i) {
+			perror("Reading index\n");
+			exit(1);
+		}
+	}
+	
+	fprintf(stderr, "%lu blocks of size %lu. Preamble:\n%s\n", 
+		num_blocks, block_size, head.preamble);
+	fprintf(stderr, "Index %s.\n", build_index(offsets, num_blocks));
+	
+	if (argc > 2) {
+		unsigned n;
+		loff_t data, offset = ((num_blocks + 1) * sizeof(offset)) + sizeof(head);
+		
+		strcpy(head.preamble, CLOOP_PREAMBLE);
+		write(STDOUT_FILENO, &head, n = sizeof(head));
+		for (i = 0; i < num_blocks; i++) {
+			data = __be64_to_cpu(offset);
+			write(STDOUT_FILENO, &data, sizeof(data));
+			n += sizeof(data);
+			offset += offsets[i].size;
+		}
+		data = __be64_to_cpu(offset);
+		write(STDOUT_FILENO, &data, sizeof(data));
+		for (i = 0; i < num_blocks && lseek64(handle, offsets[i].offset, SEEK_SET) >= 0; i++) {
+			read(handle, buffer, offsets[i].size);
+			write(STDOUT_FILENO, buffer, offsets[i].size);
+			n += offsets[i].size;
+		}
+		n &= 0x1FF;
+		if (n) {
+			memset(buffer, 0, 512);
+			write(STDOUT_FILENO, buffer, 512 - n);
+		}
+		return 0;
+	}
+	
+	for (i = 0; i < num_blocks; i++) {
+		unsigned long destlen = block_size;
+		unsigned int size = offsets[i].size;
 
-		read(handle, &offset, 2*sizeof(loff_t));
-                lseek(handle, -sizeof(loff_t), SEEK_CUR);
-                
-		currpos = lseek(handle, 0, SEEK_CUR);
-		if (lseek(handle, __be64_to_cpu(offset[0]), SEEK_SET) < 0) {
+		if (lseek64(handle, offsets[i].offset, SEEK_SET) < 0) {
 			fprintf(stderr, "lseek to %Lu: %s\n",
-				__be64_to_cpu(offset[0]), strerror(errno));
+				offsets[i].offset, strerror(errno));
 			exit(1);
 		}
                 
-                size=__be64_to_cpu(offset[1])-__be64_to_cpu(offset[0]);
-		if (size > ntohl(head.block_size) + ntohl(head.block_size)/1000
-		    + 12 + 4) {
+		if (size > zblock_maxsize) {
 			fprintf(stderr, 
 				"Size %u for block %u (offset %Lu) too big\n",
-				size, i, __be64_to_cpu(offset[0]));
+				size, i, offsets[i].offset);
 			exit(1);
 		}
 		read(handle, buffer, size);
-		if (lseek(handle, currpos, SEEK_SET) < 0) {
-			perror("seeking");
-			exit(1);
-		}
 
-		fprintf(stderr, "Block %u length %u => %lu\n",
-			i, size, destlen);
-		if (i == 3) {
-			fprintf(stderr,
-				"Block head:%02X%02X%02X%02X%02X%02X%02X%02X\n",
-				buffer[0],
-				buffer[1],
-				buffer[2],
-				buffer[3],
-				buffer[4],
-				buffer[5],
-				buffer[6],
-				buffer[7]);
-			fprintf(stderr,
-				"Block tail:%02X%02X%02X%02X%02X%02X%02X%02X\n",
-				buffer[3063],
-				buffer[3064],
-				buffer[3065],
-				buffer[3066],
-				buffer[3067],
-				buffer[3068],
-				buffer[3069],
-				buffer[3070]);
-		}
+		fprintf(stderr, "Block %u at %llu length %u",
+			i, offsets[i].offset, size);
 		switch (uncompress(clear_buffer, &destlen,
 				   buffer, size)) {
 		case Z_OK:
@@ -105,12 +143,13 @@
 			fprintf(stderr, "Uncomp: unknown error %u\n", i);
 			exit(1);
 		}
-		if (destlen != ntohl(head.block_size)) {
-			fprintf(stderr, "Uncomp: bad len %u (%lu not %u)\n", i,
-				destlen, ntohl(head.block_size));
+		fprintf(stderr, " => %lu\n", destlen);
+		if (destlen != block_size && i != num_blocks - 1) {
+			fprintf(stderr, "Uncomp: bad len %u (%lu not %lu)\n", i,
+				destlen, block_size);
 			exit(1);
 		}
-		write(STDOUT_FILENO, clear_buffer, ntohl(head.block_size));
+		write(STDOUT_FILENO, clear_buffer, (lastlen != 0 && (i+1) == num_blocks) ? lastlen : block_size);
 	}
 	return 0;
 }
--- Makefile
+++ Makefile
@@ -1,16 +1,19 @@
 PROGNAME=fusecloop
 ARCFILES=*.c *.h *.pl Makefile configure README VERSION HELP INSTALL typescript *.cloop COPYING
-PROGS=fusecloop cloopreaderdemo extract_compressed_fs
+PROGS=fusecloop cloopreaderdemo extract_compressed_fs create_compressed_fs
 FUSECFLAGS=`pkg-config fuse --cflags`
 FUSELDFLAGS=`pkg-config fuse --libs` 
 
 CFLAGS= -Wall
 
-all: fusecloop extract_compressed_fs 
+all: fusecloop extract_compressed_fs create_compressed_fs
 
 extract_compressed_fs: extract_compressed_fs.c
 	${CC} ${CFLAGS} ${LDFLAGS} -lz extract_compressed_fs.c -o extract_compressed_fs
 
+create_compressed_fs: create_compressed_fs.c md5sum.c
+	${CC} ${CFLAGS} ${LDFLAGS} -lz create_compressed_fs.c -o create_compressed_fs
+
 fusecloop: fusecloop.c cloopreader.o strver debug.o
 	${CC} ${CFLAGS} ${LDFLAGS} -lz cloopreader.o ${FUSECFLAGS} ${FUSELDFLAGS} fusecloop.c debug.o -o fusecloop
 


--- md5sum.c
+++ md5sum.c
@@ -0,0 +1,246 @@
+/*
+ * Based on busybox code.
+ *
+ * Compute MD5 checksum of strings according to the
+ * definition of MD5 in RFC 1321 from April 1992.
+ *
+ * Written by Ulrich Drepper <drepper@gnu.ai.mit.edu>, 1995.
+ *
+ * Copyright (C) 1995-1999 Free Software Foundation, Inc.
+ * Copyright (C) 2001 Manuel Novoa III
+ * Copyright (C) 2003 Glenn L. McGrath
+ * Copyright (C) 2003 Erik Andersen
+ * Copyright (C) 2010 Denys Vlasenko
+ * Copyright (C) 2012 Pascal Bellard
+ *
+ * Licensed under GPLv2 or later
+ */
+
+#define ALIGN1
+
+static uint8_t wbuffer[64]; /* always correctly aligned for uint64_t */
+static uint64_t total64;    /* must be directly before hash[] */
+static uint32_t hash[8];    /* 4 elements for md5, 5 for sha1, 8 for sha256 */
+
+/* Emit a string of hex representation of bytes */
+static char* bin2hex(char *p)
+{
+	static const char bb_hexdigits_upcase[] ALIGN1 = "0123456789abcdef";
+	int count = 16;
+	const char *cp = (const char *) hash;
+	while (count) {
+		unsigned char c = *cp++;
+		/* put lowercase hex digits */
+		*p++ = bb_hexdigits_upcase[c >> 4];
+		*p++ = bb_hexdigits_upcase[c & 0xf];
+		count--;
+	}
+	return p;
+}
+
+//#define rotl32(x,n) (((x) << (n)) | ((x) >> (32 - (n))))
+static uint32_t rotl32(uint32_t x, unsigned n)
+{
+	return (x << n) | (x >> (32 - n));
+}
+
+static void md5_process_block64(void);
+
+/* Feed data through a temporary buffer.
+ * The internal buffer remembers previous data until it has 64
+ * bytes worth to pass on.
+ */
+static void common64_hash(const void *buffer, size_t len)
+{
+	unsigned bufpos = total64 & 63;
+
+	total64 += len;
+
+	while (1) {
+		unsigned remaining = 64 - bufpos;
+		if (remaining > len)
+			remaining = len;
+		/* Copy data into aligned buffer */
+		memcpy(wbuffer + bufpos, buffer, remaining);
+		len -= remaining;
+		buffer = (const char *)buffer + remaining;
+		bufpos += remaining;
+		/* clever way to do "if (bufpos != 64) break; ... ; bufpos = 0;" */
+		bufpos -= 64;
+		if (bufpos != 0)
+			break;
+		/* Buffer is filled up, process it */
+		md5_process_block64();
+		/*bufpos = 0; - already is */
+	}
+}
+
+/* Process the remaining bytes in the buffer */
+static void common64_end(void)
+{
+	unsigned bufpos = total64 & 63;
+	/* Pad the buffer to the next 64-byte boundary with 0x80,0,0,0... */
+	wbuffer[bufpos++] = 0x80;
+
+	/* This loop iterates either once or twice, no more, no less */
+	while (1) {
+		unsigned remaining = 64 - bufpos;
+		memset(wbuffer + bufpos, 0, remaining);
+		/* Do we have enough space for the length count? */
+		if (remaining >= 8) {
+			/* Store the 64-bit counter of bits in the buffer */
+			uint64_t t = total64 << 3;
+			/* wbuffer is suitably aligned for this */
+			*(uint64_t *) (&wbuffer[64 - 8]) = t;
+		}
+		md5_process_block64();
+		if (remaining >= 8)
+			break;
+		bufpos = 0;
+	}
+}
+
+/* These are the four functions used in the four steps of the MD5 algorithm
+ * and defined in the RFC 1321.  The first function is a little bit optimized
+ * (as found in Colin Plumbs public domain implementation).
+ * #define FF(b, c, d) ((b & c) | (~b & d))
+ */
+#undef FF
+#undef FG
+#undef FH
+#undef FI
+#define FF(b, c, d) (d ^ (b & (c ^ d)))
+#define FG(b, c, d) FF(d, b, c)
+#define FH(b, c, d) (b ^ c ^ d)
+#define FI(b, c, d) (c ^ (b | ~d))
+
+/* Hash a single block, 64 bytes long and 4-byte aligned */
+static void md5_process_block64(void)
+{
+	/* Before we start, one word to the strange constants.
+	   They are defined in RFC 1321 as
+	   T[i] = (int)(4294967296.0 * fabs(sin(i))), i=1..64
+	 */
+	static const uint32_t C_array[] = {
+		/* round 1 */
+		0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
+		0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
+		0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
+		0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
+		/* round 2 */
+		0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
+		0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
+		0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
+		0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
+		/* round 3 */
+		0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
+		0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
+		0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x4881d05,
+		0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
+		/* round 4 */
+		0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
+		0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
+		0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
+		0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
+	};
+	static const char P_array[] ALIGN1 = {
+		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, /* 1 */
+		1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, /* 2 */
+		5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2, /* 3 */
+		0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9  /* 4 */
+	};
+	uint32_t *words = (uint32_t *) wbuffer;
+	uint32_t A = hash[0];
+	uint32_t B = hash[1];
+	uint32_t C = hash[2];
+	uint32_t D = hash[3];
+
+	static const char S_array[] ALIGN1 = {
+		7, 12, 17, 22,
+		5, 9, 14, 20,
+		4, 11, 16, 23,
+		6, 10, 15, 21
+	};
+	const uint32_t *pc;
+	const char *pp;
+	const char *ps;
+	int i;
+	uint32_t temp;
+
+
+	pc = C_array;
+	pp = P_array;
+	ps = S_array - 4;
+
+	for (i = 0; i < 64; i++) {
+		if ((i & 0x0f) == 0)
+			ps += 4;
+		temp = A;
+		switch (i >> 4) {
+		case 0:
+			temp += FF(B, C, D);
+			break;
+		case 1:
+			temp += FG(B, C, D);
+			break;
+		case 2:
+			temp += FH(B, C, D);
+			break;
+		case 3:
+			temp += FI(B, C, D);
+		}
+		temp += words[(int) (*pp++)] + *pc++;
+		temp = rotl32(temp, ps[i & 3]);
+		temp += B;
+		A = D;
+		D = C;
+		C = B;
+		B = temp;
+	}
+	/* Add checksum to the starting values */
+	hash[0] += A;
+	hash[1] += B;
+	hash[2] += C;
+	hash[3] += D;
+
+}
+#undef FF
+#undef FG
+#undef FH
+#undef FI
+
+/* Initialize structure containing state of computation.
+ * (RFC 1321, 3.3: Step 3)
+ */
+static void md5_begin(void)
+{
+	hash[0] = 0x67452301;
+	hash[1] = 0xefcdab89;
+	hash[2] = 0x98badcfe;
+	hash[3] = 0x10325476;
+	total64 = 0;
+}
+
+/* Used also for sha1 and sha256 */
+#define md5_hash common64_hash
+
+/* Process the remaining bytes in the buffer and put result from CTX
+ * in first 16 bytes following RESBUF.  The result is always in little
+ * endian byte order, so that a byte-wise output yields to the wanted
+ * ASCII representation of the message digest.
+ */
+#define md5_end common64_end
+
+typedef struct { char hash[16]; } md5hash;
+
+static md5hash md5sum(uint8_t *buffer, int len) 
+{
+	md5hash val;
+
+	md5_begin();
+	md5_hash(buffer, len);
+	md5_end();
+	memcpy(&val, hash, 16);
+
+	return val;
+}
--- create_compressed_fs.c
+++ create_compressed_fs.c
@@ -0,0 +1,224 @@
+#ifdef FIND_BEST_COMPRESSION
+#include <compress.h>
+extern "C" {
+#include <stdlib.h>
+#include <string.h>
+
+#define ZMAX 12	/* 12 compression levels with libdeflate, not 9 */
+static shrink_t level;
+static int pass, iter;
+static int best_compress(unsigned char *compressed,
+			 unsigned long *compressed_len,
+			 unsigned char *uncompressed,
+			 unsigned long uncompressed_len)
+{
+	int i, j, err;
+	unsigned char *buf[2];
+	unsigned len;
+	unsigned long llen,  best = *compressed_len * 2;
+	static unsigned char *buffer;
+	static unsigned long buffersz;
+
+	if (buffersz < *compressed_len) {
+		if (buffer) free(buffer);
+		buffer = (unsigned char *)  malloc(buffersz = *compressed_len);
+		if (!buffer) return Z_MEM_ERROR;
+	}
+	buf[0] = compressed;
+	buf[1] = buffer;
+	for (i = j = 0; i <= ZMAX+2 && (pass == 0 || i < pass); i++) {
+		llen = len = *compressed_len;
+		if (i >= ZMAX+1) {
+			level.level = (i == ZMAX+1) ? shrink_extra : shrink_insane;
+			err = (compress_zlib(level, buf[j],
+		     		len, uncompressed,
+		     		uncompressed_len)) ? Z_OK : Z_DATA_ERROR;
+		} else {
+			err = compress2(buf[j], &llen, uncompressed,
+				     uncompressed_len, i);
+			len = llen;
+		}
+		if (err != Z_OK) return err;
+		if (len < best) {
+			best = len;
+			j = 1 - j;
+		}
+	}
+	*compressed_len = best;
+	if (j == 0)
+		memcpy(compressed, buffer, best);
+	return err;
+}
+#define compress2(a,b,c,d,e) best_compress(a,b,c,d)
+#endif
+                        
+#include <signal.h>
+
+/* Creates a compressed file */
+#include "common_header.h"
+
+#define CLOOP_PREAMBLE "#!/bin/sh\n" "#V3.0 Format\n" "modprobe cloop file=$0 && mount -r -t iso9660 /dev/cloop $1\n" "exit $?\n"
+#define CHUNK 65536
+#define DEFAULT_BLOCKSIZE 65536
+
+static void quit(const char *s)
+{
+	fprintf(stderr, "%s\n", s);
+	exit(1);
+}
+
+static int readblock(unsigned char *buffer, int n)
+{
+	int i;
+	
+	memset(buffer, 0, n);
+	for (i = 0 ; i < n;) {
+		int j = read(STDIN_FILENO, buffer + i, n - i);
+		if (j < 0 && errno == EINTR) continue;
+		if (j <= 0) break;
+		i += j;
+	}
+	return i;
+}
+
+#ifdef FIND_BEST_COMPRESSION
+#include "md5sum.c"
+#endif
+
+static unsigned n;
+static unsigned long lastlen, pos, *block_index;
+static unsigned char *compressed;
+static unsigned long block_size = 0;
+static void flush_index(int sig)
+{
+	static char padding[512];
+	struct cloop_tail tail;
+	unsigned long len;
+
+	fprintf(stderr, "Write index for %lu blocks\n", n);
+	if (block_size >= 0x1000000) lastlen = 0;
+	tail.index_size = ntohl(sizeof(*block_index) + 256*(lastlen % 0xFFffFF));
+	tail.num_blocks = ntohl(n);
+	n *= sizeof(*block_index);
+	len = n + n/1000 + 12;
+	compressed = (unsigned char *) realloc(compressed, len);
+	if (!compressed || compress2(compressed, &len, (unsigned char *) block_index,
+				     n, Z_BEST_SPEED) != Z_OK)
+		quit("Index compression failed");
+	tail.table_size = ntohl(len);
+	pos += len + sizeof(tail);
+	n = pos & 511;
+	if (n) write(STDOUT_FILENO, padding, 512 - n);
+	write(STDOUT_FILENO, compressed, len);
+	write(STDOUT_FILENO, &tail, sizeof(tail));
+	exit(sig != 0);
+}
+
+int main(int argc, char *argv[])
+{
+	struct cloop_head head;
+	unsigned char *uncompressed;
+	unsigned long len;
+	unsigned indexmax, zlenmax;
+#ifdef FIND_BEST_COMPRESSION
+	unsigned i, j, hashmax;
+	md5hash *hash;
+#endif
+	
+#ifdef FIND_BEST_COMPRESSION
+	while (argc > 1) {
+		if (argv[1][0] == '-') {
+			int *p = &pass;
+			switch (argv[1][1]) {
+			case 'i' : p = &iter;
+			case 'n' : *p = atoi(argv[2]);
+				argc -= 2;
+				argv += 2;
+				continue;
+			}
+		}
+		argc--;
+		if (argv[1][0] < '0' || argv[1][0] > '9')
+			quit("Usage : create_compressed_fs [-n <pass>][ -i <iter>] [block size] < input > output");
+#else
+	if (argc > 1) {
+		if (argv[1][0] < '0' || argv[1][0] > '9')
+			quit("Usage : create_compressed_fs [block size] < input > output");
+#endif
+		block_size = atoi(argv[1]);
+	}
+	if (block_size < 4096)
+		block_size = DEFAULT_BLOCKSIZE;
+	fprintf(stderr, "Block size is %lu\n", block_size);
+	zlenmax = block_size + block_size/1000 + 12;
+
+	memset(&head, 0, sizeof(head));
+	strcpy(head.preamble, CLOOP_PREAMBLE);
+	head.num_blocks = -1;
+	head.block_size = htonl(block_size);
+	write(STDOUT_FILENO, &head, sizeof(head));
+	pos = sizeof(head);
+	
+	compressed = (unsigned char *) malloc(zlenmax);
+	uncompressed = (unsigned char *) malloc(block_size);
+	block_index = (unsigned long *) malloc(indexmax = CHUNK);
+#ifdef FIND_BEST_COMPRESSION
+	hash = (md5hash *) malloc(hashmax = CHUNK);
+	if (!compressed || !uncompressed || !block_index || !hash)
+#else
+	if (!compressed || !uncompressed || !block_index)
+#endif
+		quit("Malloc failed");
+	
+	signal(SIGINT,flush_index);
+	signal(SIGQUIT,flush_index);
+	signal(SIGTERM,flush_index);
+
+	for (n = 0; (len = readblock(uncompressed, block_size)) != 0; n++) {
+		lastlen = len;
+		if (n * sizeof(*block_index) >= indexmax) {
+			block_index = (unsigned long *) realloc(block_index,
+							  indexmax += CHUNK);
+			if (!block_index)
+				quit("Realloc");
+		}
+#ifdef FIND_BEST_COMPRESSION
+		if (n * sizeof(*hash) >= hashmax) {
+			hash = (md5hash *) realloc(hash, hashmax += CHUNK);
+			if (!hash)
+				quit("Realloc hash");
+		}
+		hash[n] = md5sum(uncompressed, len);
+		j = 0x7FFFFFFF;
+		if (n < j)
+			j = n;
+		for (i = 0; i < j; i++) {
+			if (* (uint32_t *) &hash[i] == * (uint32_t *) &hash[n]
+			    && !memcmp(&hash[i],&hash[n],sizeof(*hash)))
+				break;
+		}
+		if (i != j) {
+			block_index[n] = ntohl(0x80000000 | i);
+			fprintf(stderr, "Block %u length %lu => duplicate %lu\n",
+				n, block_size, i);
+		}
+		else
+#endif
+		{
+			len = zlenmax;
+			if (compress2(compressed, &len, uncompressed, lastlen, 
+					Z_BEST_SPEED) != Z_OK)
+				quit("Compression failed");
+			fprintf(stderr, "Block %u length %lu => %lu\n",
+				n, block_size, len);
+			write(STDOUT_FILENO, compressed, len);
+			pos += len;
+			block_index[n] = ntohl(len);
+		}
+	}
+	flush_index(0);
+	return 0;
+}
+#ifdef FIND_BEST_COMPRESSION
+}
+#endif
--- fusecloop.c
+++ fusecloop.c
@@ -65,7 +65,7 @@
 	
     memcpy(stbuf,&stb,sizeof stb);
     stbuf->st_mode&=~0222;
-    stbuf->st_size = cd.blocksize * cd.numblocks;
+    stbuf->st_size = (loff_t) cd.blocksize * cd.numblocks;
     /*
     stbuf->st_mode = S_IFREG | 0444;
     stbuf->st_nlink = 1;
