--- compressed_loop.h
+++ compressed_loop.h
@@ -41,6 +41,80 @@
 /* data_index (num_blocks 64bit pointers, network order)...      */
 /* compressed data (gzip block compressed format)...             */
 
+struct cloop_tail
+{
+	u_int32_t table_size;
+	u_int32_t index_size;
+	u_int32_t num_blocks;
+};
+
+struct block_info
+{
+	loff_t offset;		/* 64-bit offsets of compressed block */
+	u_int32_t size;		/* 32-bit compressed block size */
+	u_int32_t optidx;	/* 32-bit index number */
+};
+
+static inline char *build_index(struct block_info *offsets, unsigned long n)
+{
+	u_int32_t *ofs32 = (u_int32_t *) offsets;
+	loff_t    *ofs64 = (loff_t *) offsets;
+	
+	if (ofs32[0] == 0) {
+		if (ofs32[2]) { /* ACCELERATED KNOPPIX V1.0 */
+			while (n--) {
+				offsets[n].offset = __be64_to_cpu(offsets[n].offset);
+				offsets[n].size = ntohl(offsets[n].size);
+			}
+			return (char *) "128BE accelerated knoppix 1.0";
+		}
+		else { /* V2.0 */
+			loff_t last = __be64_to_cpu(ofs64[n]);
+			while (n--) {
+				offsets[n].size = last - 
+					(offsets[n].offset = __be64_to_cpu(ofs64[n])); 
+				last = offsets[n].offset;
+			}
+			return (char *) "64BE v2.0";
+		}
+	}
+	else if (ofs32[1] == 0) { /* V1.0 */
+		loff_t last = __le64_to_cpu(ofs64[n]);
+		while (n--) {
+			offsets[n].size = last - 
+				(offsets[n].offset = __le64_to_cpu(ofs64[n])); 
+			last = offsets[n].offset;
+		}
+		return (char *) "64LE v1.0";
+	}
+	else if (ntohl(ofs32[0]) == (4*n) + 0x8C) { /* V0.68 */
+		loff_t last = ntohl(ofs32[n]);
+		while (n--) {
+			offsets[n].size = last - 
+				(offsets[n].offset = ntohl(ofs32[n])); 
+			last = offsets[n].offset;
+		}
+		return (char *) "32BE v0.68";
+	}
+	else { /* V3.0 */
+		unsigned long i;
+		loff_t j;
+		
+		for (i = n; i-- != 0; )
+			offsets[i].size = ntohl(ofs32[i]); 
+		for (i = 0, j = sizeof(struct cloop_head); i < n; i++) {
+			offsets[i].offset = j;
+			if (offsets[i].size & 0x80000000) {
+				unsigned long k = offset[i].size & 0x7FFFFFFF;
+				offsets[i].offset = offsets[k].offset;
+				offsets[i].size = offsets[k].size;
+			}
+			else j += offsets[i].size;
+		}
+		return (char *) "32BE v3.0";
+	}
+}
+
 /* Cloop suspend IOCTL */
 #define CLOOP_SUSPEND 0x4C07
 

--- cloopreader.h
+++ cloopreader.h
@@ -33,7 +33,7 @@
     int numblocks;
     ulong blocksize;
 
-    loff_t* toc; /* Data index */
+    struct block_info *toc; /* Data index */
     size_t tocsize;
 
     unsigned char* cblock;  /* Compressed block */

--- cloopreader.c
+++ cloopreader.c
@@ -59,10 +59,32 @@
 
     ALLOC(c->pblock,c->blocksize);
 
-    c->tocsize=sizeof *c->toc * (c->numblocks+1); /* One extra address is position of EOF */
-    ALLOC(c->toc,c->tocsize);
+    if (c->numblocks + 1 == 0) {
+	struct cloop_tail tail;
+	loff_t end = lseek(c->fh,0,SEEK_END); /* lseek(,-n,SEEK_END) buggy ? */
+	void *p;
+	ulong toclen, len; 
 
-    OP(read_all(c->fh,c->toc,c->tocsize));  /* read Data Index */
+	OP(lseek(c->fh, end - sizeof(tail), SEEK_SET)); 
+	OP(read_all(c->fh, &tail, sizeof(tail)));
+	c->numblocks = ntohl(tail.num_blocks);
+	c->tocsize = sizeof(*c->toc) * c->numblocks;
+	len = ntohl(tail.table_size);
+	toclen = (ntohl(tail.index_size) & 255) * c->numblocks;
+	OP(lseek(c->fh, end - sizeof(tail) - len, SEEK_SET));
+        ALLOC(c->toc, sizeof(*c->toc) * c->numblocks);
+        ALLOC(p,len);
+        OP(read_all(c->fh,p,len));  /* read Data Index */
+	if (uncompress((void *)c->toc,&toclen,p,len) != Z_OK)
+		exit(1);
+	free(p);
+    }
+    else {
+	c->tocsize = sizeof(*c->toc) * c->numblocks;
+        ALLOC(c->toc,c->tocsize);
+        OP(read_all(c->fh,c->toc,c->tocsize));  /* read Data Index */
+    }
+    build_index(c->toc, c->numblocks);
     c->cblocksizecur=0;
     c->curblock=-1;
     return 0;
@@ -79,10 +101,10 @@
     if(page>=c->numblocks){errno=EFAULT;return -1;}
     c->curblock=page;
 
-    bprintf("Seeking to 0x%Lx\n",btc(c->toc[page]));
-    OP(lseek(c->fh,btc(c->toc[page]), SEEK_SET)); 
+    bprintf("Seeking to 0x%Lx\n",c->toc[page].offset);
+    OP(lseek(c->fh,c->toc[page].offset, SEEK_SET)); 
 
-    c->cblocksize=btc(c->toc[page+1]) - btc(c->toc[page]);
+    c->cblocksize=c->toc[page].size;
     bprintf("Compressed size=%lu\n",c->cblocksize);
     if(c->cblocksize > c->cblocksizecur){
 	if(c->cblocksizecur)free(c->cblock);

--- extract_compressed_fs.c
+++ extract_compressed_fs.c
@@ -1,19 +1,23 @@
 /* Extracts a filesystem back from a compressed fs file */
+#define _LARGEFILE64_SOURCE
 #include "common_header.h"
+#define CLOOP_PREAMBLE "#!/bin/sh\n" "#V2.0 Format\n" "modprobe cloop file=$0 && mount -r -t iso9660 /dev/cloop $1\n" "exit $?\n"
 
 int main(int argc, char *argv[])
 {
 	int handle;
 	struct cloop_head head;
 	unsigned int i;
+	unsigned long num_blocks, block_size, zblock_maxsize, lastlen = 0;
 	unsigned char *buffer, *clear_buffer;
+	struct block_info *offsets;
 
-	if (argc != 2) {
-		fprintf(stderr, "Need filename\n");
+	if (argc < 2 || argv[1][0] == '-') {
+		fprintf(stderr, "Usage: extract_compressed_fs file [--convert-to-v2] > output\n");
 		exit(1);
 	}
 
-	handle = open(argv[1], O_RDONLY);
+	handle = open(argv[1], O_RDONLY|O_LARGEFILE);
 	if (handle < 0) {
 		perror("Opening compressed file\n");
 		exit(1);
@@ -24,44 +28,100 @@
 		exit(1);
 	}
 
-	buffer = malloc(ntohl(head.block_size) + ntohl(head.block_size)/1000
-			+ 12 + 4);
-	clear_buffer = malloc(ntohl(head.block_size));
-	fprintf(stderr, "%u blocks of size %u. Preamble:\n%s\n", 
-		ntohl(head.num_blocks), ntohl(head.block_size), head.preamble);
+	num_blocks = ntohl(head.num_blocks);
+	block_size = ntohl(head.block_size);
+	zblock_maxsize =  block_size + block_size/1000 + 12 + 4;
+	buffer = malloc(zblock_maxsize);
+	clear_buffer = malloc(block_size);
 
-	for (i = 0; i < ntohl(head.num_blocks); i++) {
-		int currpos;
-		unsigned long destlen = ntohl(head.block_size);
-		loff_t offset[2];
-		unsigned int size;
+	if (num_blocks == (unsigned long) -1) {
+		void *table;
+		struct cloop_tail tail;
+		unsigned long len, table_size;
+		loff_t end = lseek64(handle, 0, SEEK_END);
+		
+		if (lseek64(handle, end - sizeof(tail), SEEK_SET) < 0 ||
+		    read(handle, &tail, sizeof(tail)) != sizeof(tail) ||
+		    lseek64(handle, end - sizeof(tail) - 
+		    	  ntohl(tail.table_size), SEEK_SET) < 0) {
+			perror("Reading tail\n");
+			exit(1);
+		}
+		head.num_blocks = tail.num_blocks;
+		num_blocks = ntohl(head.num_blocks);
+		table_size = ntohl(tail.table_size);
+		table = malloc(table_size);
+		len = i = num_blocks * (ntohl(tail.index_size) & 255);
+		lastlen = ntohl(tail.index_size) & ~0x1FF;
+		offsets = malloc(num_blocks * sizeof(*offsets));
+		if (!table || !offsets || 
+		    read(handle, table, table_size) != table_size ||
+		    uncompress((void *)offsets, &len, table, table_size) != Z_OK ||
+		    len != i) {
+			perror("Reading index\n");
+			exit(1);
+		}
+		free(table);
+	}
+	else {
+		offsets = malloc(i = num_blocks * sizeof(*offsets));
+		if (!offsets || read(handle, offsets, i) != i) {
+			perror("Reading index\n");
+			exit(1);
+		}
+	}
+	
+	fprintf(stderr, "%lu blocks of size %lu. Preamble:\n%s\n", 
+		num_blocks, block_size, head.preamble);
+	fprintf(stderr, "Index %s.\n", build_index(offsets, num_blocks));
+	
+	if (argc > 2) {
+		unsigned n;
+		loff_t data, offset = ((num_blocks + 1) * sizeof(offset)) + sizeof(head);
+		
+		strcpy(head.preamble, CLOOP_PREAMBLE);
+		write(STDOUT_FILENO, &head, n = sizeof(head));
+		for (i = 0; i < num_blocks; i++) {
+			data = __be64_to_cpu(offset);
+			write(STDOUT_FILENO, &data, sizeof(data));
+			n += sizeof(data);
+			offset += offsets[i].size;
+		}
+		data = __be64_to_cpu(offset);
+		write(STDOUT_FILENO, &data, sizeof(data));
+		for (i = 0; i < num_blocks && lseek64(handle, offsets[i].offset, SEEK_SET) >= 0; i++) {
+			read(handle, buffer, offsets[i].size);
+			write(STDOUT_FILENO, buffer, offsets[i].size);
+			n += offsets[i].size;
+		}
+		n &= 0x1FF;
+		if (n) {
+			memset(buffer, 0, 512);
+			write(STDOUT_FILENO, buffer, 512 - n);
+		}
+		return 0;
+	}
+	
+	for (i = 0; i < num_blocks; i++) {
+		unsigned long destlen = block_size;
+		unsigned int size = offsets[i].size;
 
-		read(handle, &offset, 2*sizeof(loff_t));
-                lseek(handle, -sizeof(loff_t), SEEK_CUR);
-                
-		currpos = lseek(handle, 0, SEEK_CUR);
-		if (lseek(handle, __be64_to_cpu(offset[0]), SEEK_SET) < 0) {
+		if (lseek64(handle, offsets[i].offset, SEEK_SET) < 0) {
 			fprintf(stderr, "lseek to %Lu: %s\n",
-				__be64_to_cpu(offset[0]), strerror(errno));
+				offsets[i].offset, strerror(errno));
 			exit(1);
 		}
                 
-                size=__be64_to_cpu(offset[1])-__be64_to_cpu(offset[0]);
-		if (size > ntohl(head.block_size) + ntohl(head.block_size)/1000
-		    + 12 + 4) {
+		if (size > zblock_maxsize) {
 			fprintf(stderr, 
 				"Size %u for block %u (offset %Lu) too big\n",
-				size, i, __be64_to_cpu(offset[0]));
+				size, i, offsets[i].offset);
 			exit(1);
 		}
 		read(handle, buffer, size);
-		if (lseek(handle, currpos, SEEK_SET) < 0) {
-			perror("seeking");
-			exit(1);
-		}
 
-		fprintf(stderr, "Block %u length %u => %lu\n",
-			i, size, destlen);
+		fprintf(stderr, "Block %u at %llu length %u => %lu\n",
+			i, offsets[i].offset, size, destlen);
 		if (i == 3) {
 			fprintf(stderr,
 				"Block head:%02X%02X%02X%02X%02X%02X%02X%02X\n",
@@ -105,12 +165,12 @@
 			fprintf(stderr, "Uncomp: unknown error %u\n", i);
 			exit(1);
 		}
-		if (destlen != ntohl(head.block_size)) {
-			fprintf(stderr, "Uncomp: bad len %u (%lu not %u)\n", i,
-				destlen, ntohl(head.block_size));
+		if (destlen != block_size) {
+			fprintf(stderr, "Uncomp: bad len %u (%lu not %lu)\n", i,
+				destlen, block_size);
 			exit(1);
 		}
-		write(STDOUT_FILENO, clear_buffer, ntohl(head.block_size));
+		write(STDOUT_FILENO, clear_buffer, (lastlen != 0 && (i+1) == num_blocks) ? lastlen : block_size);
 	}
 	return 0;
 }

--- Makefile
+++ Makefile
@@ -1,16 +1,19 @@
 PROGNAME=fusecloop
 ARCFILES=*.c *.h *.pl Makefile configure README VERSION HELP INSTALL typescript *.cloop COPYING
-PROGS=fusecloop cloopreaderdemo extract_compressed_fs
+PROGS=fusecloop cloopreaderdemo extract_compressed_fs create_compressed_fs
 FUSECFLAGS=`pkg-config fuse --cflags`
 FUSELDFLAGS=`pkg-config fuse --libs` 
 
 CFLAGS= -Wall
 
-all: fusecloop extract_compressed_fs 
+all: fusecloop extract_compressed_fs create_compressed_fs
 
 extract_compressed_fs: extract_compressed_fs.c
 	${CC} ${CFLAGS} ${LDFLAGS} -lz extract_compressed_fs.c -o extract_compressed_fs
 
+create_compressed_fs: create_compressed_fs.c
+	${CC} ${CFLAGS} ${LDFLAGS} -lz create_compressed_fs.c -o create_compressed_fs
+
 fusecloop: fusecloop.c cloopreader.o strver debug.o
 	${CC} ${CFLAGS} ${LDFLAGS} -lz cloopreader.o ${FUSECFLAGS} ${FUSELDFLAGS} fusecloop.c debug.o -o fusecloop
 


--- create_compressed_fs.c
+++ create_compressed_fs.c
@@ -0,0 +1,148 @@
+#ifdef FIND_BEST_COMPRESSION
+#include <compress.h>
+extern "C" {
+#include <stdlib.h>
+#include <string.h>
+
+static int best_compress(unsigned char *compressed,
+			 unsigned long *compressed_len,
+			 unsigned char *uncompressed,
+			 unsigned long uncompressed_len)
+{
+	int i, j, err;
+	unsigned char *buf[2];
+	unsigned len;
+	unsigned long llen,  best = *compressed_len * 2;
+	static unsigned char *buffer;
+	static unsigned long buffersz;
+
+	if (buffersz < *compressed_len) {
+		if (buffer) free(buffer);
+		buffer = (unsigned char *)  malloc(buffersz = *compressed_len);
+		if (!buffer) return Z_MEM_ERROR;
+	}
+	buf[0] = compressed;
+	buf[1] = buffer;
+	for (i = j = 0; i <= 10; i++) {
+		llen = len = *compressed_len;
+		if (i == 10) 
+			err = (compress_zlib(shrink_extreme, buf[j],
+		     		len, uncompressed,
+		     		uncompressed_len)) ? Z_OK : Z_DATA_ERROR;
+		else {
+			err = compress2(buf[j], &llen, uncompressed,
+				     uncompressed_len, i);
+			len = llen;
+		}
+		if (err != Z_OK) return err;
+		if (len < best) {
+			best = len;
+			j = 1 - j;
+		}
+	}
+	*compressed_len = best;
+	if (j == 0)
+		memcpy(compressed, buffer, best);
+	return err;
+}
+#define compress2(a,b,c,d,e) best_compress(a,b,c,d)
+#endif
+                        
+/* Creates a compressed file */
+#include "common_header.h"
+
+#define CLOOP_PREAMBLE "#!/bin/sh\n" "#V3.0 Format\n" "modprobe cloop file=$0 && mount -r -t iso9660 /dev/cloop $1\n" "exit $?\n"
+#define CHUNK 65536
+#define DEFAULT_BLOCKSIZE 65536
+
+static void quit(const char *s)
+{
+	fprintf(stderr, "%s\n", s);
+	exit(1);
+}
+
+static int readblock(unsigned char *buffer, int n)
+{
+	int i;
+	
+	memset(buffer, 0, n);
+	for (i = 0 ; i < n;) {
+		int j = read(STDIN_FILENO, buffer + i, n - i);
+		if (j < 0 && errno == EINTR) continue;
+		if (j <= 0) break;
+		i += j;
+	}
+	return i;
+}
+
+int main(int argc, char *argv[])
+{
+	struct cloop_head head;
+	struct cloop_tail tail;
+	unsigned long  block_size = 0;
+	unsigned char *compressed, *uncompressed;
+	unsigned long *index;
+	int n, indexmax, zlenmax;
+	unsigned long lastlen, len, pos;
+	static char padding[512];
+	
+	if (argc > 1) {
+		if (argv[1][0] < '0' || argv[1][0] > '9')
+			quit("Usage : create_compressed_fs [block size] < input > output");
+		block_size = atoi(argv[1]);
+	}
+	if (block_size < 4096)
+		block_size = DEFAULT_BLOCKSIZE;
+	fprintf(stderr, "Block size is %lu\n", block_size);
+	zlenmax = block_size + block_size/1000 + 12;
+
+	memset(&head, 0, sizeof(head));
+	strcpy(head.preamble, CLOOP_PREAMBLE);
+	head.num_blocks = -1;
+	head.block_size = htonl(block_size);
+	write(STDOUT_FILENO, &head, sizeof(head));
+	pos = sizeof(head);
+	
+	compressed = (unsigned char *) malloc(zlenmax);
+	uncompressed = (unsigned char *) malloc(block_size);
+	index = (unsigned long *) malloc(indexmax = CHUNK);
+	if (!compressed || !uncompressed || !index)
+		quit("Malloc failed");
+	
+	for (n = 0; (len = readblock(uncompressed, block_size)) != 0; n++) {
+		lastlen = len;
+		len = zlenmax;
+		if (compress2(compressed, &len, uncompressed, block_size, 
+				Z_BEST_COMPRESSION) != Z_OK)
+			quit("Compression failed");
+		fprintf(stderr, "Block %u length %lu => %lu\n",
+			n, block_size, len);
+		write(STDOUT_FILENO, compressed, len);
+		pos += len;
+		if (n * sizeof(*index) >= indexmax) {
+			index = (unsigned long *) realloc(index,
+							  indexmax += CHUNK);
+			if (!index)
+				quit("Realloc");
+		}
+		index[n] = ntohl(len);
+	}
+	tail.index_size = ntohl(sizeof(*index) + (lastlen & ~0x1FF));
+	tail.num_blocks = ntohl(n);
+	n *= sizeof(*index);
+	len = n + n/1000 + 12;
+	compressed = (unsigned char *) realloc(compressed, len);
+	if (!compressed || compress2(compressed, &len, (unsigned char *) index,
+				     n, Z_BEST_COMPRESSION) != Z_OK)
+		quit("Index compression failed");
+	tail.table_size = ntohl(len);
+	pos += len + sizeof(tail);
+	n = pos & 511;
+	if (n) write(STDOUT_FILENO, padding, 512 - n);
+	write(STDOUT_FILENO, compressed, len);
+	write(STDOUT_FILENO, &tail, sizeof(tail));
+	return 0;
+}
+#ifdef FIND_BEST_COMPRESSION
+}
+#endif

--- fusecloop.c
+++ fusecloop.c
@@ -65,7 +65,7 @@
 	
     memcpy(stbuf,&stb,sizeof stb);
     stbuf->st_mode&=~0222;
-    stbuf->st_size = cd.blocksize * cd.numblocks;
+    stbuf->st_size = (loff_t) cd.blocksize * cd.numblocks;
     /*
     stbuf->st_mode = S_IFREG | 0444;
     stbuf->st_nlink = 1;
