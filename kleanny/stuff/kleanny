#!/bin/bash
#
#           Provided By The SliTaz Development Team.
#          Copyright (C) 2017 The SliTaz Association.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @@ Kleanny Database.
. /var/www/cgi-bin/kleanny/res/base/data

# ----------------------------------------------------------------------------
# Check DEPENDS

CHK_BASH="/var/lib/tazpkg/installed/bash"          # Check Bash
CHK_YAD="/var/lib/tazpkg/installed/yad-gtk2-html"  # Check Yad with HTML.
CHK_SVG="/var/lib/tazpkg/installed/librsvg"        # Check Librsvg.
CHK_FAIL="file:///$localdata/base/deps.fail.html"  # Report missing DEPS.

# ----------------------------------------------------------------------------
# It is important to check if any dependencies have been removed by user.

checkDEPS(){
if [ -e "$CHK_BASH" ] && [ -e "$CHK_YAD" ] && [ -e "$CHK_SVG" ]
then
  # OK! Let's check the logs now...
  checkLOG
else
  # Oops! Let's report the problem in the default browser.
  browser $CHK_FAIL
exit
fi
}

# ----------------------------------------------------------------------------
# Search caches and files to be reported (LOGFILE).
#
# !! To add new entries please enter only the caches.
#    Keep the configuration files off the list.
#
#  Example:
#
#  $userdir/.thunderbird >> Includes settings. This is not good.
#  $userdir/.cache/thunderbird >> Includes cache only. That's nice!

ASH_HISTORY="$userdir/.ash_history"
BASH_HISTORY="$userdir/.bash_history"
CACHE_THUMBNAILS="$userdir/.thumbnails"
CACHE_MIDORI="$userdir/.cache/midori"
CACHE_TRANSMISSION="$userdir/.cache/transmission"
CACHE_WINE="$userdir/.cache/wine"
CACHE_GCHROME="$userdir/.cache/google-chrome"
CACHE_THUNDERBIRD="$userdir/.cache/thunderbird"

# ----------------------------------------------------------------------------
# Write the report of caches and files to remove (REMFILE).

CLEAN_THUMBNAILS="$CACHE_THUMBNAILS/*"      # Thumbnails images cache.
CLEAN_MIDORI="$CACHE_MIDORI/*"              # Midori Browser cache.
CLEAN_TRANSMISSION="$CACHE_TRANSMISSION/*"  # Transmission P2P cache.
CLEAN_WINE="$CACHE_WINE/*"                  # Wine user cache.
CLEAN_GCHROME="$CACHE_GCHROME/*"            # Google Chrome cache.
CLEAN_THUNDERBIRD="$CACHE_THUNDERBIRD/*"    # Thunderbird cache.

# ----------------------------------------------------------------------------
# Settings to directory temporary and logs

CREATE_LOG_DIR="$(mkdir -p $tmpdir)"      # Create the log directory.
SET_TMPDIR_TO_ALL="$(chmod 777 $tmpdir)"  # Set permission to log directory.
LOGFILE="status.log"   # Report: Caches and files to read.
REMFILE="remove.log"   # Report: Caches and files to remove.
DEL_OLD_LOGS="$(rm -rf $tmpdir/$LOGFILE $tmpdir/$REMFILE)"  # Delete old logs.

export APP_LOGFILE="$tmpdir/$LOGFILE"  # Recognize the output to status.log.
export APP_REMFILE="$tmpdir/$REMFILE"  # Recognize the output to remove.log.

# ----------------------------------------------------------------------------
# Check the old logs to avoid conflicts with future verification.
#
# !! Kleanny needs this action to verify that the user uninstalls some
#    software and an old log is no longer useful. This is important!

# @@ The first step the application should do.
checkLOG(){
[ -e "$tmpdir" ] && $DEL_OLD_LOGS || $CREATE_LOG_DIR
writeLOG
}

# @@ Write the log files.
writeLOG(){

# ----------------------------------------------------------------------------
# Report caches and files to status (status.log).

cat <<-'LOG' >> ${APP_LOGFILE}
# Automatically generated by KLEANNY Application.
# The list of caches and files to be reported.
# [ dir: /tmp/kleanny/status.log ]

ASH_HISTORY="$userdir/.ash_history"
BASH_HISTORY="$userdir/.bash_history"
CACHE_THUMBNAILS="$userdir/.thumbnails"
CACHE_MIDORI="$userdir/.cache/midori"
CACHE_TRANSMISSION="$userdir/.cache/transmission"
CACHE_WINE="$userdir/.cache/wine"
CACHE_GCHROME="$userdir/.cache/google-chrome"
CACHE_THUNDERBIRD="$userdir/.cache/thunderbird"

CACHES="$(echo \
LOG

# ----------------------------------------------------------------------------
# Report caches and files to cleanup action (remove.log).

cat <<-'DELETE' >> ${APP_REMFILE}
# Automatically generated by KLEANNY Application.
# The list of caches and files to be removed.
# ******** Please do not edit this file. ********
# [ dir: /tmp/kleanny/remove.log ]

ASH_HISTORY="$userdir/.ash_history"
BASH_HISTORY="$userdir/.bash_history"
CACHE_THUMBNAILS="$userdir/.thumbnails"
CACHE_MIDORI="$userdir/.cache/midori"
CACHE_TRANSMISSION="$userdir/.cache/transmission"
CACHE_WINE="$userdir/.cache/wine"
CACHE_GCHROME="$userdir/.cache/google-chrome"
CACHE_THUNDERBIRD="$userdir/.cache/thunderbird"

CLEAN_THUMBNAILS="$CACHE_THUMBNAILS/*"
CLEAN_MIDORI="$CACHE_MIDORI/*"
CLEAN_TRANSMISSION="$CACHE_TRANSMISSION/*"
CLEAN_WINE="$CACHE_WINE/*"
CLEAN_GCHROME="$CACHE_GCHROME/*"
CLEAN_THUNDERBIRD="$CACHE_THUNDERBIRD/*"

cleanup(){
DELETE

if [ -e "$ASH_HISTORY" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$ASH_HISTORY \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $ASH_HISTORY && touch $ASH_HISTORY && chmod 777 $ASH_HISTORY
DELETE
fi

if [ -e "$BASH_HISTORY" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$BASH_HISTORY \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $BASH_HISTORY && touch $BASH_HISTORY && chmod 777 $BASH_HISTORY
DELETE
fi

if [ -e "$CACHE_THUMBNAILS" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_THUMBNAILS \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_THUMBNAILS
DELETE
fi

if [ -e "$CACHE_MIDORI" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_MIDORI \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_MIDORI
DELETE
fi

if [ -e "$CACHE_TRANSMISSION" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_TRANSMISSION \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_TRANSMISSION
DELETE
fi

if [ -e "$CACHE_WINE" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_WINE \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_WINE
DELETE
fi

if [ -e "$CACHE_GCHROME" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_GCHROME \
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_GCHROME
DELETE
fi

if [ -e "$CACHE_THUNDERBIRD" ]
then
cat <<-'LOG' >> ${APP_LOGFILE}
$CACHE_THUNDERBIRD)"
LOG
cat <<-'DELETE' >> ${APP_REMFILE}
rm -rf $CLEAN_THUNDERBIRD
DELETE
fi

cat <<-'DELETE' >> ${APP_REMFILE}
}
DELETE

cat <<-'DELETE' >> ${APP_LOGFILE}

STATUS_REPORT="$(du -hcs $CACHES | grep total | sed 's/[*total* ]//g')"

DELETE

# @@ Set the correct permission for the temporary directory and all files.
$SET_TMPDIR_TO_ALL

# @@ Call Kleanny startup.
startUP

}

startUP(){

# @@ A beautiful splash screen.
splash=$(yad --gtkrc="$localtheme/gtkrc" \
    --window-icon="$localicon/48/kleanny.png" \
    --title="$APP_NAME" --center \
    --image="$localtheme/splashscreen.svg" \
    --no-buttons --undecorated --timeout="3" \
    --auto-close --auto-kill)

# Launch Kleanny.
kleanny=$(yad --gtkrc="$localtheme/gtkrc" \
    --window-icon="$localicon/48/kleanny.png" \
    --title="$APP_NAME" --center --no-buttons \
    --browser --html --mime="text/html" \
    --width="320" --height="481" --undecorated \
    --borders="0" --uri="$localwww/res/base/status.cgi")

}

# @@ First step.
checkDEPS
