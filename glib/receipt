# SliTaz package receipt.

PACKAGE="glib"
VERSION="2.34.3"
CATEGORY="x-window"
SHORT_DESC="C routines."
MAINTAINER="pankso@slitaz.org"
LICENSE="GPL2"
TARBALL="$PACKAGE-$VERSION.tar.xz"
WEB_SITE="http://www.gtk.org/"
WGET_URL="$GNOME_MIRROR/$PACKAGE/${VERSION:0:4}/$TARBALL"
HOST_ARCH="i486 arm"

DEPENDS="pcre libffi libxml2 elfutils"
BUILD_DEPENDS="pcre-dev libffi-dev gettext zlib-dev perl python-dev \
elfutils-dev libxml2-dev libxml2-tools automake"

# Handle cross comilation. Use host Perl, Python, etc
case "$ARCH" in
	arm*)
		BUILD_DEPENDS="pcre-dev libffi-dev zlib-dev elfutils-dev libxml2-dev" ;;
esac

# Rules to configure and make the package.
compile_rules()
{
	case "$ARCH" in
		i?86)
			./configure \
				--sysconfdir=/etc \
				--with-pcre=system \
				$CONFIGURE_ARGS ;;
		arm*)
			# Native ARM build --> if ARCH != SLITAZ_ARCH ?
			export LD_LIBRARY_PATH=/cross/$ARCH/sysroot/usr/lib:/usr/lib:/lib
			export PKG_CONFIG_LIBPATH=/cross/$ARCH/sysroot/usr/lib/pkgconfig
			
			# Glib
			export glib_cv_stack_grows=${glib_cv_stack_grows=no}
			export glib_cv_uscore=${glib_cv_uscore=no}
			export ac_cv_func_posix_getpwuid_r=${ac_cv_func_posix_getpwuid_r=no}
			export ac_cv_func_posix_getgrgid_r=${ac_cv_func_posix_getgrgid_r=no}
			export ac_cv_type_long_long=${ac_cv_type_long_long=yes}
			CC="$HOST_SYSTEM-gcc" \
			LIBTOOL="$HOST_SYSTEM-libtool" \
			./configure \
				--sysconfdir=/etc \
				--with-pcre=system \
				--build=i486-slitaz-linux \
				--host=$ARCH-slitaz-linux-gnueabi \
				--enable-shared=yes \
				--enable-static=yes ;;
	esac && 
	make && make install
}

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	mkdir -p $fs/usr/lib
	cp -a $install/usr/bin $fs/usr
	cp -a $install/usr/lib/*.so* $fs/usr/lib
	
	# Split gio --> libgio
	rm $fs/usr/lib/libgio*
	
	# Python codegen, tester, Perl mkenums --> glib-dev
	for bin in gdbus-codegen gtester* glib-mkenums
	do
		rm $fs/usr/bin/$bin
	done
	
	# Cook packages that want glib.
	for w in libgio libgio-dev
	do
		[ -x "/usr/bin/cook" ] && echo cook $w
	done
}
