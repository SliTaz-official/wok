#!/bin/sh
#
# get-package - create and install SliTaz package algobox
#
# (C) 2020 SliTaz - GNU General Public License v3.
# Author : unknown
# modified by HGT on 2020-01-28
#
#	=== Initialisations ===

PKGS_DB="/var/lib/tazpkg"	# packages database directory
PACKAGE="algobox"
WEB_SITE="https://www.xm1math.net/algobox/"
CATEGORY="misc"
SHORT_DESC="Algorithm creation tool for education."
DEPENDS="libQtWebkit libQtXml libQtGui libQtCore gcc-lib-base"
URL="${WEB_SITE}download.html"

# Declare functions check_root, status, ...
. /lib/libtaz.sh
# and make commandline options (if any) available as variables

is_installed()
{
	if [ -d $ROOT$PKGS_DB/installed/$PACKAGE ]
	  then	#package is deemed to be installed
	 	return 0
	  else
	 	return 1
	fi
}

# Show commandline options, if requested by --help
if [ "$help" == "yes" ]
  then
	echo "Commandline options:
  $0
	--version=<version>
	--root=<path-to-root>
	--install=yes|no
	--keep=no|yes
	--tmpdir=<directory-to-build-package>"
	exit
fi

# Check for system administrator privileges
check_root

title "Package $PACKAGE will be build as SliTaz package and installed"

# Fetch latest version, unless version is set by option --version
[ -z "$version" ] && version="latest"

# Install SliTaz package, unless inhibited by option --install=no
[ -z "$install" ] && install="yes"

# Delete SliTaz package file $PACKAGE-$VERSION.tazpkg after installation,
# unless option --keep=yes is given
[ -z "$keep" ] && keep="no"

# Directory for temporary files
[ -z "$tempdir" ] && TMP_DIR="/tmp/get-$PACKAGE"

# Logging file (unused by now)
LOG=$TMP_DIR/get-$PACKAGE.log

cat <<EOT
Options in use:
  root           : $root/
  version        : $version
  install package: $install
  keep tazpkg    : $keep
  build directory: $TMP_DIR

EOT

separator; newline

#	=== Remove package, if installed ===
if [ is_installed ]
  then
	action "Removing installed version..."
	tazpkg remove $PACKAGE --root="$root/"
	[ ! is_installed ] &&
	die "Can't remove installed version. Exiting."
fi

#	=== Fetch archive file, if not existing ===

if [ "$version" == "latest" ]
  then
	FILE=$(wget -q -O - $URL | sed '/debian_10_amd64.deb/!d; s|.*href=.\([^"]*\).*|\1|')
	WGET_URL="${WEB_SITE}$FILE"
	FILE=$(basename $FILE)
  else
	die "Can fetch latest version only. Exiting."
fi

CUR_DIR=$(pwd)
mkdir -p $TMP_DIR
cd $TMP_DIR
if [ -f $FILE ]
  then
	echo "Using existing archive file $FILE"
  else
	action "Fetching the archive"
	newline
	wget	--no-check-certificate $WGET_URL
	if [ ! -f $FILE ]
	  then
		cd $CUR_DIR
		rm -rf $TMP_DIR
		echo "Could not transfer $FILE from $URL. Exiting."
		exit 1
	fi
fi

#	=== Extract files from archive ===
action "Extracting the archive"

mkdir $PACKAGE
# Extract metadata from Debian package
dpkg-deb -e $FILE $PACKAGE/meta
# Extract files from Debian package
dpkg-deb -x $FILE $PACKAGE/fs
status

# Remove archive file
rm -f $FILE

#	=== Create SliTaz package ===

# Prepare metadata for SliTaz package

if ! grep -q "insert long description" $PACKAGE/meta/control
  then
	sed '/^Description:/,$!d;s/^Description://' \
		< $PACKAGE/meta/control > $PACKAGE/description.txt
fi
SHORT_DESC="$(sed '/^Description:/!d; s/.*: //' $PACKAGE/meta/control)"
MAINTAINER="$(sed '/^Maintainer:/!d;  s/.*: //' $PACKAGE/meta/control)"
VERSION="$(   sed '/^Version:/!d;     s/.*: //' $PACKAGE/meta/control)"

# rename build directory
mv $PACKAGE $PACKAGE-$VERSION

cd $PACKAGE-$VERSION

# Create recipe for SliTaz package
cat > receipt <<EOT
# SliTaz package receipt.

PACKED_SIZE=""
UNPACKED_SIZE=""
PACKAGE="$PACKAGE"
VERSION="$VERSION"
CATEGORY="$CATEGORY"
TAGS="$TAGS"
SHORT_DESC="$SHORT_DESC"
MAINTAINER="$MAINTAINER"
LICENSE="non-free"
WEB_SITE="$WEB_SITE"

DEPENDS="$DEPENDS"

EOT

action "Creating the package $PACKAGE..."
# Pack
cd ..
tazpkg pack $PACKAGE-$VERSION
# Remove package tree
rm -rf $PACKAGE-$VERSION

#	=== Install the SliTaz package ===
[ "$install" == "yes" ] &&
tazpkg install $PACKAGE-$VERSION.tazpkg --root="$root"

#	=== Cleanup ===
# Preserve package file, if requested
[ "$keep" == "yes" ] && mv $PACKAGE-$VERSION.tazpkg $CUR_DIR

# Remove temporary build directory
cd $CUR_DIR
rm -rf $TMP_DIR
