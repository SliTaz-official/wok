RCSSmin is a CSS minifier written in Python.

The minifier is based on the semantics of the YUI compressor, which itself is
based on the rule list by Isaac Schlueter.

This module is a re-implementation aiming for speed instead of maximum
compression, so it can be used at runtime (rather than during a preprocessing
step). RCSSmin does syntactical compression only (removing spaces, comments and
possibly semicolons). It does not provide semantic compression (like removing
empty blocks, collapsing redundant properties etc). It does, however, support
various CSS hacks (by keeping them working as intended).

Here's a feature list:

  - Strings are kept, except that escaped newlines are stripped
  - Space/Comments before the very end or before various characters are
    stripped: ``:{});=>],!`` (The colon (``:``) is a special case, a single
    space is kept if it's outside a ruleset.)
  - Space/Comments at the very beginning or after various characters are
    stripped: ``{}(=:>[,!``
  - Optional space after unicode escapes is kept, resp. replaced by a simple
    space
  - whitespaces inside ``url()`` definitions are stripped
  - Comments starting with an exclamation mark (``!``) can be kept optionally.
  - All other comments and/or whitespace characters are replaced by a single
    space.
  - Multiple consecutive semicolons are reduced to one
  - The last semicolon within a ruleset is stripped
  - CSS Hacks supported:

    - IE7 hack (``>/**/``)
    - Mac-IE5 hack (``/*\*/.../**/``)
    - The boxmodelhack is supported naturally because it relies on valid CSS2
      strings
    - Between ``:first-line`` and the following comma or curly brace a space is
      inserted. (apparently it's needed for IE6)
    - Same for ``:first-letter``

rcssmin.c is a reimplementation of rcssmin.py in C and improves runtime up to
factor 100 or so (depending on the input). docs/BENCHMARKS in the source
distribution contains the details.

The module additionally provides a "streamy" interface:

$ python -mrcssmin <css >minified

It takes two options:

  -b  Keep bang-comments (Comments starting with an exclamation mark)  
  -p  Force using the python implementation (not the C implementation)
